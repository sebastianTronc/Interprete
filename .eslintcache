[{"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\index.js":"1","C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\App.js":"2","C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\Cuerpo.jsx":"3","C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\Footer.jsx":"4","C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\Navegacion.jsx":"5","C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\guia.jsx":"6","C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\code.jsx":"7","C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\library\\funciones.js":"8","C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\library\\lenguaje.js":"9"},{"size":180,"mtime":1607789101938,"results":"10","hashOfConfig":"11"},{"size":2471,"mtime":1607984895943,"results":"12","hashOfConfig":"11"},{"size":656,"mtime":1607982647567,"results":"13","hashOfConfig":"11"},{"size":1537,"mtime":1607983038615,"results":"14","hashOfConfig":"11"},{"size":2968,"mtime":1607984904087,"results":"15","hashOfConfig":"11"},{"size":1582,"mtime":1607921085072,"results":"16","hashOfConfig":"11"},{"size":3185,"mtime":1607984629946,"results":"17","hashOfConfig":"11"},{"size":622,"mtime":1607789101939,"results":"18","hashOfConfig":"11"},{"size":399616,"mtime":1607789101944,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1p8yzwb",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":"39","usedDeprecatedRules":"22"},"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\index.js",[],["40","41"],"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\App.js",[],"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\Cuerpo.jsx",[],"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\Footer.jsx",[],"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\Navegacion.jsx",[],"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\guia.jsx",[],"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\componentes\\code.jsx",["42","43"],"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\library\\funciones.js",[],"C:\\Users\\BladeNigth\\Documents\\GitHub\\Interprete\\src\\library\\lenguaje.js",["44","45","46","47","48","49","50","51","52","53","54","55","56","57"],"/*\r\n * Generated by PEG.js 0.10.0.\r\n *\r\n * http://pegjs.org/\r\n */\r\n\r\n\"use strict\";\r\n\r\nfunction peg$subclass(child, parent) {\r\n  function ctor() { this.constructor = child; }\r\n  ctor.prototype = parent.prototype;\r\n  child.prototype = new ctor();\r\n}\r\n\r\nfunction peg$SyntaxError(message, expected, found, location) {\r\n  this.message  = message;\r\n  this.expected = expected;\r\n  this.found    = found;\r\n  this.location = location;\r\n  this.name     = \"SyntaxError\";\r\n\r\n  if (typeof Error.captureStackTrace === \"function\") {\r\n    Error.captureStackTrace(this, peg$SyntaxError);\r\n  }\r\n}\r\n\r\npeg$subclass(peg$SyntaxError, Error);\r\n\r\npeg$SyntaxError.buildMessage = function(expected, found) {\r\n  var DESCRIBE_EXPECTATION_FNS = {\r\n        literal: function(expectation) {\r\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\r\n        },\r\n\r\n        \"class\": function(expectation) {\r\n          var escapedParts = \"\",\r\n              i;\r\n\r\n          for (i = 0; i < expectation.parts.length; i++) {\r\n            escapedParts += expectation.parts[i] instanceof Array\r\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\r\n              : classEscape(expectation.parts[i]);\r\n          }\r\n\r\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\r\n        },\r\n\r\n        any: function(expectation) {\r\n          return \"any character\";\r\n        },\r\n\r\n        end: function(expectation) {\r\n          return \"end of input\";\r\n        },\r\n\r\n        other: function(expectation) {\r\n          return expectation.description;\r\n        }\r\n      };\r\n\r\n  function hex(ch) {\r\n    return ch.charCodeAt(0).toString(16).toUpperCase();\r\n  }\r\n\r\n  function literalEscape(s) {\r\n    return s\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\"/g,  '\\\\\"')\r\n      .replace(/\\0/g, '\\\\0')\r\n      .replace(/\\t/g, '\\\\t')\r\n      .replace(/\\n/g, '\\\\n')\r\n      .replace(/\\r/g, '\\\\r')\r\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\r\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\r\n  }\r\n\r\n  function classEscape(s) {\r\n    return s\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\]/g, '\\\\]')\r\n      .replace(/\\^/g, '\\\\^')\r\n      .replace(/-/g,  '\\\\-')\r\n      .replace(/\\0/g, '\\\\0')\r\n      .replace(/\\t/g, '\\\\t')\r\n      .replace(/\\n/g, '\\\\n')\r\n      .replace(/\\r/g, '\\\\r')\r\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\r\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\r\n  }\r\n\r\n  function describeExpectation(expectation) {\r\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\r\n  }\r\n\r\n  function describeExpected(expected) {\r\n    var descriptions = new Array(expected.length),\r\n        i, j;\r\n\r\n    for (i = 0; i < expected.length; i++) {\r\n      descriptions[i] = describeExpectation(expected[i]);\r\n    }\r\n\r\n    descriptions.sort();\r\n\r\n    if (descriptions.length > 0) {\r\n      for (i = 1, j = 1; i < descriptions.length; i++) {\r\n        if (descriptions[i - 1] !== descriptions[i]) {\r\n          descriptions[j] = descriptions[i];\r\n          j++;\r\n        }\r\n      }\r\n      descriptions.length = j;\r\n    }\r\n\r\n    switch (descriptions.length) {\r\n      case 1:\r\n        return descriptions[0];\r\n\r\n      case 2:\r\n        return descriptions[0] + \" or \" + descriptions[1];\r\n\r\n      default:\r\n        return descriptions.slice(0, -1).join(\", \")\r\n          + \", or \"\r\n          + descriptions[descriptions.length - 1];\r\n    }\r\n  }\r\n\r\n  function describeFound(found) {\r\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\r\n  }\r\n\r\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\r\n};\r\n\r\nfunction peg$parse(input, options) {\r\n  options = options !== void 0 ? options : {};\r\n\r\n  var peg$FAILED = {},\r\n\r\n      peg$startRuleFunctions = { Start: peg$parseStart },\r\n      peg$startRuleFunction  = peg$parseStart,\r\n\r\n      peg$c0 = function(program) { return program; },\r\n      peg$c1 = peg$anyExpectation(),\r\n      peg$c2 = peg$otherExpectation(\"whitespace\"),\r\n      peg$c3 = \"\\t\",\r\n      peg$c4 = peg$literalExpectation(\"\\t\", false),\r\n      peg$c5 = \"\\x0B\",\r\n      peg$c6 = peg$literalExpectation(\"\\x0B\", false),\r\n      peg$c7 = \"\\f\",\r\n      peg$c8 = peg$literalExpectation(\"\\f\", false),\r\n      peg$c9 = \" \",\r\n      peg$c10 = peg$literalExpectation(\" \", false),\r\n      peg$c11 = \"\\xA0\",\r\n      peg$c12 = peg$literalExpectation(\"\\xA0\", false),\r\n      peg$c13 = \"\\uFEFF\",\r\n      peg$c14 = peg$literalExpectation(\"\\uFEFF\", false),\r\n      peg$c15 = /^[\\n\\r\\u2028\\u2029]/,\r\n      peg$c16 = peg$classExpectation([\"\\n\", \"\\r\", \"\\u2028\", \"\\u2029\"], false, false),\r\n      peg$c17 = peg$otherExpectation(\"end of line\"),\r\n      peg$c18 = \"\\n\",\r\n      peg$c19 = peg$literalExpectation(\"\\n\", false),\r\n      peg$c20 = \"\\r\\n\",\r\n      peg$c21 = peg$literalExpectation(\"\\r\\n\", false),\r\n      peg$c22 = \"\\r\",\r\n      peg$c23 = peg$literalExpectation(\"\\r\", false),\r\n      peg$c24 = \"\\u2028\",\r\n      peg$c25 = peg$literalExpectation(\"\\u2028\", false),\r\n      peg$c26 = \"\\u2029\",\r\n      peg$c27 = peg$literalExpectation(\"\\u2029\", false),\r\n      peg$c28 = peg$otherExpectation(\"comment\"),\r\n      peg$c29 = \"/*\",\r\n      peg$c30 = peg$literalExpectation(\"/*\", false),\r\n      peg$c31 = \"*/\",\r\n      peg$c32 = peg$literalExpectation(\"*/\", false),\r\n      peg$c33 = \"//\",\r\n      peg$c34 = peg$literalExpectation(\"//\", false),\r\n      peg$c35 = function(name) { return name; },\r\n      peg$c36 = peg$otherExpectation(\"identifier\"),\r\n      peg$c37 = function(head, tail) {\r\n            return {\r\n              type: \"Identifier\",\r\n              name: head + tail.join(\"\")\r\n            };\r\n          },\r\n      peg$c38 = \"$\",\r\n      peg$c39 = peg$literalExpectation(\"$\", false),\r\n      peg$c40 = \"_\",\r\n      peg$c41 = peg$literalExpectation(\"_\", false),\r\n      peg$c42 = \"\\\\\",\r\n      peg$c43 = peg$literalExpectation(\"\\\\\", false),\r\n      peg$c44 = function(sequence) { return sequence; },\r\n      peg$c45 = \"\\u200C\",\r\n      peg$c46 = peg$literalExpectation(\"\\u200C\", false),\r\n      peg$c47 = \"\\u200D\",\r\n      peg$c48 = peg$literalExpectation(\"\\u200D\", false),\r\n      peg$c49 = function() { return { type: \"Literal\", value: null }; },\r\n      peg$c50 = function() { return { type: \"Literal\", value: true  }; },\r\n      peg$c51 = function() { return { type: \"Literal\", value: false }; },\r\n      peg$c52 = peg$otherExpectation(\"number\"),\r\n      peg$c53 = function(literal) {\r\n            return literal;\r\n          },\r\n      peg$c54 = \".\",\r\n      peg$c55 = peg$literalExpectation(\".\", false),\r\n      peg$c56 = function() {\r\n            return { type: \"Literal\", value: parseFloat(text()) };\r\n          },\r\n      peg$c57 = \"0\",\r\n      peg$c58 = peg$literalExpectation(\"0\", false),\r\n      peg$c59 = /^[0-9]/,\r\n      peg$c60 = peg$classExpectation([[\"0\", \"9\"]], false, false),\r\n      peg$c61 = /^[1-9]/,\r\n      peg$c62 = peg$classExpectation([[\"1\", \"9\"]], false, false),\r\n      peg$c63 = \"e\",\r\n      peg$c64 = peg$literalExpectation(\"e\", true),\r\n      peg$c65 = /^[+\\-]/,\r\n      peg$c66 = peg$classExpectation([\"+\", \"-\"], false, false),\r\n      peg$c67 = \"0x\",\r\n      peg$c68 = peg$literalExpectation(\"0x\", true),\r\n      peg$c69 = function(digits) {\r\n            return { type: \"Literal\", value: parseInt(digits, 16) };\r\n           },\r\n      peg$c70 = /^[0-9a-f]/i,\r\n      peg$c71 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"]], false, true),\r\n      peg$c72 = peg$otherExpectation(\"string\"),\r\n      peg$c73 = \"\\\"\",\r\n      peg$c74 = peg$literalExpectation(\"\\\"\", false),\r\n      peg$c75 = function(chars) {\r\n            return { type: \"Literal\", value: chars.join(\"\") };\r\n          },\r\n      peg$c76 = \"'\",\r\n      peg$c77 = peg$literalExpectation(\"'\", false),\r\n      peg$c78 = function() { return text(); },\r\n      peg$c79 = function() { return \"\"; },\r\n      peg$c80 = function() { return \"\\0\"; },\r\n      peg$c81 = \"b\",\r\n      peg$c82 = peg$literalExpectation(\"b\", false),\r\n      peg$c83 = function() { return \"\\b\"; },\r\n      peg$c84 = \"f\",\r\n      peg$c85 = peg$literalExpectation(\"f\", false),\r\n      peg$c86 = function() { return \"\\f\"; },\r\n      peg$c87 = \"n\",\r\n      peg$c88 = peg$literalExpectation(\"n\", false),\r\n      peg$c89 = function() { return \"\\n\"; },\r\n      peg$c90 = \"r\",\r\n      peg$c91 = peg$literalExpectation(\"r\", false),\r\n      peg$c92 = function() { return \"\\r\"; },\r\n      peg$c93 = \"t\",\r\n      peg$c94 = peg$literalExpectation(\"t\", false),\r\n      peg$c95 = function() { return \"\\t\"; },\r\n      peg$c96 = \"v\",\r\n      peg$c97 = peg$literalExpectation(\"v\", false),\r\n      peg$c98 = function() { return \"\\v\"; },\r\n      peg$c99 = \"x\",\r\n      peg$c100 = peg$literalExpectation(\"x\", false),\r\n      peg$c101 = \"u\",\r\n      peg$c102 = peg$literalExpectation(\"u\", false),\r\n      peg$c103 = function(digits) {\r\n            return String.fromCharCode(parseInt(digits, 16));\r\n          },\r\n      peg$c104 = peg$otherExpectation(\"regular expression\"),\r\n      peg$c105 = \"/\",\r\n      peg$c106 = peg$literalExpectation(\"/\", false),\r\n      peg$c107 = function(pattern, flags) {\r\n            var value;\r\n\r\n            try {\r\n              value = new RegExp(pattern, flags);\r\n            } catch (e) {\r\n              error(e.message);\r\n            }\r\n\r\n            return { type: \"Literal\", value: value };\r\n          },\r\n      peg$c108 = /^[*\\\\\\/[]/,\r\n      peg$c109 = peg$classExpectation([\"*\", \"\\\\\", \"/\", \"[\"], false, false),\r\n      peg$c110 = /^[\\\\\\/[]/,\r\n      peg$c111 = peg$classExpectation([\"\\\\\", \"/\", \"[\"], false, false),\r\n      peg$c112 = \"[\",\r\n      peg$c113 = peg$literalExpectation(\"[\", false),\r\n      peg$c114 = \"]\",\r\n      peg$c115 = peg$literalExpectation(\"]\", false),\r\n      peg$c116 = /^[\\]\\\\]/,\r\n      peg$c117 = peg$classExpectation([\"]\", \"\\\\\"], false, false),\r\n      peg$c118 = /^[a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137-\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148-\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C-\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA-\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9-\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC-\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF-\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F-\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0-\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB-\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE-\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0560-\\u0588\\u10D0-\\u10FA\\u10FD-\\u10FF\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6-\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FC7\\u1FD0-\\u1FD3\\u1FD6-\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6-\\u1FF7\\u210A\\u210E-\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C-\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65-\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73-\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3-\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7AF\\uA7B5\\uA7B7\\uA7B9\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A]/,\r\n      peg$c119 = peg$classExpectation([[\"a\", \"z\"], \"\\xB5\", [\"\\xDF\", \"\\xF6\"], [\"\\xF8\", \"\\xFF\"], \"\\u0101\", \"\\u0103\", \"\\u0105\", \"\\u0107\", \"\\u0109\", \"\\u010B\", \"\\u010D\", \"\\u010F\", \"\\u0111\", \"\\u0113\", \"\\u0115\", \"\\u0117\", \"\\u0119\", \"\\u011B\", \"\\u011D\", \"\\u011F\", \"\\u0121\", \"\\u0123\", \"\\u0125\", \"\\u0127\", \"\\u0129\", \"\\u012B\", \"\\u012D\", \"\\u012F\", \"\\u0131\", \"\\u0133\", \"\\u0135\", [\"\\u0137\", \"\\u0138\"], \"\\u013A\", \"\\u013C\", \"\\u013E\", \"\\u0140\", \"\\u0142\", \"\\u0144\", \"\\u0146\", [\"\\u0148\", \"\\u0149\"], \"\\u014B\", \"\\u014D\", \"\\u014F\", \"\\u0151\", \"\\u0153\", \"\\u0155\", \"\\u0157\", \"\\u0159\", \"\\u015B\", \"\\u015D\", \"\\u015F\", \"\\u0161\", \"\\u0163\", \"\\u0165\", \"\\u0167\", \"\\u0169\", \"\\u016B\", \"\\u016D\", \"\\u016F\", \"\\u0171\", \"\\u0173\", \"\\u0175\", \"\\u0177\", \"\\u017A\", \"\\u017C\", [\"\\u017E\", \"\\u0180\"], \"\\u0183\", \"\\u0185\", \"\\u0188\", [\"\\u018C\", \"\\u018D\"], \"\\u0192\", \"\\u0195\", [\"\\u0199\", \"\\u019B\"], \"\\u019E\", \"\\u01A1\", \"\\u01A3\", \"\\u01A5\", \"\\u01A8\", [\"\\u01AA\", \"\\u01AB\"], \"\\u01AD\", \"\\u01B0\", \"\\u01B4\", \"\\u01B6\", [\"\\u01B9\", \"\\u01BA\"], [\"\\u01BD\", \"\\u01BF\"], \"\\u01C6\", \"\\u01C9\", \"\\u01CC\", \"\\u01CE\", \"\\u01D0\", \"\\u01D2\", \"\\u01D4\", \"\\u01D6\", \"\\u01D8\", \"\\u01DA\", [\"\\u01DC\", \"\\u01DD\"], \"\\u01DF\", \"\\u01E1\", \"\\u01E3\", \"\\u01E5\", \"\\u01E7\", \"\\u01E9\", \"\\u01EB\", \"\\u01ED\", [\"\\u01EF\", \"\\u01F0\"], \"\\u01F3\", \"\\u01F5\", \"\\u01F9\", \"\\u01FB\", \"\\u01FD\", \"\\u01FF\", \"\\u0201\", \"\\u0203\", \"\\u0205\", \"\\u0207\", \"\\u0209\", \"\\u020B\", \"\\u020D\", \"\\u020F\", \"\\u0211\", \"\\u0213\", \"\\u0215\", \"\\u0217\", \"\\u0219\", \"\\u021B\", \"\\u021D\", \"\\u021F\", \"\\u0221\", \"\\u0223\", \"\\u0225\", \"\\u0227\", \"\\u0229\", \"\\u022B\", \"\\u022D\", \"\\u022F\", \"\\u0231\", [\"\\u0233\", \"\\u0239\"], \"\\u023C\", [\"\\u023F\", \"\\u0240\"], \"\\u0242\", \"\\u0247\", \"\\u0249\", \"\\u024B\", \"\\u024D\", [\"\\u024F\", \"\\u0293\"], [\"\\u0295\", \"\\u02AF\"], \"\\u0371\", \"\\u0373\", \"\\u0377\", [\"\\u037B\", \"\\u037D\"], \"\\u0390\", [\"\\u03AC\", \"\\u03CE\"], [\"\\u03D0\", \"\\u03D1\"], [\"\\u03D5\", \"\\u03D7\"], \"\\u03D9\", \"\\u03DB\", \"\\u03DD\", \"\\u03DF\", \"\\u03E1\", \"\\u03E3\", \"\\u03E5\", \"\\u03E7\", \"\\u03E9\", \"\\u03EB\", \"\\u03ED\", [\"\\u03EF\", \"\\u03F3\"], \"\\u03F5\", \"\\u03F8\", [\"\\u03FB\", \"\\u03FC\"], [\"\\u0430\", \"\\u045F\"], \"\\u0461\", \"\\u0463\", \"\\u0465\", \"\\u0467\", \"\\u0469\", \"\\u046B\", \"\\u046D\", \"\\u046F\", \"\\u0471\", \"\\u0473\", \"\\u0475\", \"\\u0477\", \"\\u0479\", \"\\u047B\", \"\\u047D\", \"\\u047F\", \"\\u0481\", \"\\u048B\", \"\\u048D\", \"\\u048F\", \"\\u0491\", \"\\u0493\", \"\\u0495\", \"\\u0497\", \"\\u0499\", \"\\u049B\", \"\\u049D\", \"\\u049F\", \"\\u04A1\", \"\\u04A3\", \"\\u04A5\", \"\\u04A7\", \"\\u04A9\", \"\\u04AB\", \"\\u04AD\", \"\\u04AF\", \"\\u04B1\", \"\\u04B3\", \"\\u04B5\", \"\\u04B7\", \"\\u04B9\", \"\\u04BB\", \"\\u04BD\", \"\\u04BF\", \"\\u04C2\", \"\\u04C4\", \"\\u04C6\", \"\\u04C8\", \"\\u04CA\", \"\\u04CC\", [\"\\u04CE\", \"\\u04CF\"], \"\\u04D1\", \"\\u04D3\", \"\\u04D5\", \"\\u04D7\", \"\\u04D9\", \"\\u04DB\", \"\\u04DD\", \"\\u04DF\", \"\\u04E1\", \"\\u04E3\", \"\\u04E5\", \"\\u04E7\", \"\\u04E9\", \"\\u04EB\", \"\\u04ED\", \"\\u04EF\", \"\\u04F1\", \"\\u04F3\", \"\\u04F5\", \"\\u04F7\", \"\\u04F9\", \"\\u04FB\", \"\\u04FD\", \"\\u04FF\", \"\\u0501\", \"\\u0503\", \"\\u0505\", \"\\u0507\", \"\\u0509\", \"\\u050B\", \"\\u050D\", \"\\u050F\", \"\\u0511\", \"\\u0513\", \"\\u0515\", \"\\u0517\", \"\\u0519\", \"\\u051B\", \"\\u051D\", \"\\u051F\", \"\\u0521\", \"\\u0523\", \"\\u0525\", \"\\u0527\", \"\\u0529\", \"\\u052B\", \"\\u052D\", \"\\u052F\", [\"\\u0560\", \"\\u0588\"], [\"\\u10D0\", \"\\u10FA\"], [\"\\u10FD\", \"\\u10FF\"], [\"\\u13F8\", \"\\u13FD\"], [\"\\u1C80\", \"\\u1C88\"], [\"\\u1D00\", \"\\u1D2B\"], [\"\\u1D6B\", \"\\u1D77\"], [\"\\u1D79\", \"\\u1D9A\"], \"\\u1E01\", \"\\u1E03\", \"\\u1E05\", \"\\u1E07\", \"\\u1E09\", \"\\u1E0B\", \"\\u1E0D\", \"\\u1E0F\", \"\\u1E11\", \"\\u1E13\", \"\\u1E15\", \"\\u1E17\", \"\\u1E19\", \"\\u1E1B\", \"\\u1E1D\", \"\\u1E1F\", \"\\u1E21\", \"\\u1E23\", \"\\u1E25\", \"\\u1E27\", \"\\u1E29\", \"\\u1E2B\", \"\\u1E2D\", \"\\u1E2F\", \"\\u1E31\", \"\\u1E33\", \"\\u1E35\", \"\\u1E37\", \"\\u1E39\", \"\\u1E3B\", \"\\u1E3D\", \"\\u1E3F\", \"\\u1E41\", \"\\u1E43\", \"\\u1E45\", \"\\u1E47\", \"\\u1E49\", \"\\u1E4B\", \"\\u1E4D\", \"\\u1E4F\", \"\\u1E51\", \"\\u1E53\", \"\\u1E55\", \"\\u1E57\", \"\\u1E59\", \"\\u1E5B\", \"\\u1E5D\", \"\\u1E5F\", \"\\u1E61\", \"\\u1E63\", \"\\u1E65\", \"\\u1E67\", \"\\u1E69\", \"\\u1E6B\", \"\\u1E6D\", \"\\u1E6F\", \"\\u1E71\", \"\\u1E73\", \"\\u1E75\", \"\\u1E77\", \"\\u1E79\", \"\\u1E7B\", \"\\u1E7D\", \"\\u1E7F\", \"\\u1E81\", \"\\u1E83\", \"\\u1E85\", \"\\u1E87\", \"\\u1E89\", \"\\u1E8B\", \"\\u1E8D\", \"\\u1E8F\", \"\\u1E91\", \"\\u1E93\", [\"\\u1E95\", \"\\u1E9D\"], \"\\u1E9F\", \"\\u1EA1\", \"\\u1EA3\", \"\\u1EA5\", \"\\u1EA7\", \"\\u1EA9\", \"\\u1EAB\", \"\\u1EAD\", \"\\u1EAF\", \"\\u1EB1\", \"\\u1EB3\", \"\\u1EB5\", \"\\u1EB7\", \"\\u1EB9\", \"\\u1EBB\", \"\\u1EBD\", \"\\u1EBF\", \"\\u1EC1\", \"\\u1EC3\", \"\\u1EC5\", \"\\u1EC7\", \"\\u1EC9\", \"\\u1ECB\", \"\\u1ECD\", \"\\u1ECF\", \"\\u1ED1\", \"\\u1ED3\", \"\\u1ED5\", \"\\u1ED7\", \"\\u1ED9\", \"\\u1EDB\", \"\\u1EDD\", \"\\u1EDF\", \"\\u1EE1\", \"\\u1EE3\", \"\\u1EE5\", \"\\u1EE7\", \"\\u1EE9\", \"\\u1EEB\", \"\\u1EED\", \"\\u1EEF\", \"\\u1EF1\", \"\\u1EF3\", \"\\u1EF5\", \"\\u1EF7\", \"\\u1EF9\", \"\\u1EFB\", \"\\u1EFD\", [\"\\u1EFF\", \"\\u1F07\"], [\"\\u1F10\", \"\\u1F15\"], [\"\\u1F20\", \"\\u1F27\"], [\"\\u1F30\", \"\\u1F37\"], [\"\\u1F40\", \"\\u1F45\"], [\"\\u1F50\", \"\\u1F57\"], [\"\\u1F60\", \"\\u1F67\"], [\"\\u1F70\", \"\\u1F7D\"], [\"\\u1F80\", \"\\u1F87\"], [\"\\u1F90\", \"\\u1F97\"], [\"\\u1FA0\", \"\\u1FA7\"], [\"\\u1FB0\", \"\\u1FB4\"], [\"\\u1FB6\", \"\\u1FB7\"], \"\\u1FBE\", [\"\\u1FC2\", \"\\u1FC4\"], [\"\\u1FC6\", \"\\u1FC7\"], [\"\\u1FD0\", \"\\u1FD3\"], [\"\\u1FD6\", \"\\u1FD7\"], [\"\\u1FE0\", \"\\u1FE7\"], [\"\\u1FF2\", \"\\u1FF4\"], [\"\\u1FF6\", \"\\u1FF7\"], \"\\u210A\", [\"\\u210E\", \"\\u210F\"], \"\\u2113\", \"\\u212F\", \"\\u2134\", \"\\u2139\", [\"\\u213C\", \"\\u213D\"], [\"\\u2146\", \"\\u2149\"], \"\\u214E\", \"\\u2184\", [\"\\u2C30\", \"\\u2C5E\"], \"\\u2C61\", [\"\\u2C65\", \"\\u2C66\"], \"\\u2C68\", \"\\u2C6A\", \"\\u2C6C\", \"\\u2C71\", [\"\\u2C73\", \"\\u2C74\"], [\"\\u2C76\", \"\\u2C7B\"], \"\\u2C81\", \"\\u2C83\", \"\\u2C85\", \"\\u2C87\", \"\\u2C89\", \"\\u2C8B\", \"\\u2C8D\", \"\\u2C8F\", \"\\u2C91\", \"\\u2C93\", \"\\u2C95\", \"\\u2C97\", \"\\u2C99\", \"\\u2C9B\", \"\\u2C9D\", \"\\u2C9F\", \"\\u2CA1\", \"\\u2CA3\", \"\\u2CA5\", \"\\u2CA7\", \"\\u2CA9\", \"\\u2CAB\", \"\\u2CAD\", \"\\u2CAF\", \"\\u2CB1\", \"\\u2CB3\", \"\\u2CB5\", \"\\u2CB7\", \"\\u2CB9\", \"\\u2CBB\", \"\\u2CBD\", \"\\u2CBF\", \"\\u2CC1\", \"\\u2CC3\", \"\\u2CC5\", \"\\u2CC7\", \"\\u2CC9\", \"\\u2CCB\", \"\\u2CCD\", \"\\u2CCF\", \"\\u2CD1\", \"\\u2CD3\", \"\\u2CD5\", \"\\u2CD7\", \"\\u2CD9\", \"\\u2CDB\", \"\\u2CDD\", \"\\u2CDF\", \"\\u2CE1\", [\"\\u2CE3\", \"\\u2CE4\"], \"\\u2CEC\", \"\\u2CEE\", \"\\u2CF3\", [\"\\u2D00\", \"\\u2D25\"], \"\\u2D27\", \"\\u2D2D\", \"\\uA641\", \"\\uA643\", \"\\uA645\", \"\\uA647\", \"\\uA649\", \"\\uA64B\", \"\\uA64D\", \"\\uA64F\", \"\\uA651\", \"\\uA653\", \"\\uA655\", \"\\uA657\", \"\\uA659\", \"\\uA65B\", \"\\uA65D\", \"\\uA65F\", \"\\uA661\", \"\\uA663\", \"\\uA665\", \"\\uA667\", \"\\uA669\", \"\\uA66B\", \"\\uA66D\", \"\\uA681\", \"\\uA683\", \"\\uA685\", \"\\uA687\", \"\\uA689\", \"\\uA68B\", \"\\uA68D\", \"\\uA68F\", \"\\uA691\", \"\\uA693\", \"\\uA695\", \"\\uA697\", \"\\uA699\", \"\\uA69B\", \"\\uA723\", \"\\uA725\", \"\\uA727\", \"\\uA729\", \"\\uA72B\", \"\\uA72D\", [\"\\uA72F\", \"\\uA731\"], \"\\uA733\", \"\\uA735\", \"\\uA737\", \"\\uA739\", \"\\uA73B\", \"\\uA73D\", \"\\uA73F\", \"\\uA741\", \"\\uA743\", \"\\uA745\", \"\\uA747\", \"\\uA749\", \"\\uA74B\", \"\\uA74D\", \"\\uA74F\", \"\\uA751\", \"\\uA753\", \"\\uA755\", \"\\uA757\", \"\\uA759\", \"\\uA75B\", \"\\uA75D\", \"\\uA75F\", \"\\uA761\", \"\\uA763\", \"\\uA765\", \"\\uA767\", \"\\uA769\", \"\\uA76B\", \"\\uA76D\", \"\\uA76F\", [\"\\uA771\", \"\\uA778\"], \"\\uA77A\", \"\\uA77C\", \"\\uA77F\", \"\\uA781\", \"\\uA783\", \"\\uA785\", \"\\uA787\", \"\\uA78C\", \"\\uA78E\", \"\\uA791\", [\"\\uA793\", \"\\uA795\"], \"\\uA797\", \"\\uA799\", \"\\uA79B\", \"\\uA79D\", \"\\uA79F\", \"\\uA7A1\", \"\\uA7A3\", \"\\uA7A5\", \"\\uA7A7\", \"\\uA7A9\", \"\\uA7AF\", \"\\uA7B5\", \"\\uA7B7\", \"\\uA7B9\", \"\\uA7FA\", [\"\\uAB30\", \"\\uAB5A\"], [\"\\uAB60\", \"\\uAB65\"], [\"\\uAB70\", \"\\uABBF\"], [\"\\uFB00\", \"\\uFB06\"], [\"\\uFB13\", \"\\uFB17\"], [\"\\uFF41\", \"\\uFF5A\"]], false, false),\r\n      peg$c120 = /^[\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5-\\u06E6\\u07F4-\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C-\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D-\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C-\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8-\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3-\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E-\\uFF9F]/,\r\n      peg$c121 = peg$classExpectation([[\"\\u02B0\", \"\\u02C1\"], [\"\\u02C6\", \"\\u02D1\"], [\"\\u02E0\", \"\\u02E4\"], \"\\u02EC\", \"\\u02EE\", \"\\u0374\", \"\\u037A\", \"\\u0559\", \"\\u0640\", [\"\\u06E5\", \"\\u06E6\"], [\"\\u07F4\", \"\\u07F5\"], \"\\u07FA\", \"\\u081A\", \"\\u0824\", \"\\u0828\", \"\\u0971\", \"\\u0E46\", \"\\u0EC6\", \"\\u10FC\", \"\\u17D7\", \"\\u1843\", \"\\u1AA7\", [\"\\u1C78\", \"\\u1C7D\"], [\"\\u1D2C\", \"\\u1D6A\"], \"\\u1D78\", [\"\\u1D9B\", \"\\u1DBF\"], \"\\u2071\", \"\\u207F\", [\"\\u2090\", \"\\u209C\"], [\"\\u2C7C\", \"\\u2C7D\"], \"\\u2D6F\", \"\\u2E2F\", \"\\u3005\", [\"\\u3031\", \"\\u3035\"], \"\\u303B\", [\"\\u309D\", \"\\u309E\"], [\"\\u30FC\", \"\\u30FE\"], \"\\uA015\", [\"\\uA4F8\", \"\\uA4FD\"], \"\\uA60C\", \"\\uA67F\", [\"\\uA69C\", \"\\uA69D\"], [\"\\uA717\", \"\\uA71F\"], \"\\uA770\", \"\\uA788\", [\"\\uA7F8\", \"\\uA7F9\"], \"\\uA9CF\", \"\\uA9E6\", \"\\uAA70\", \"\\uAADD\", [\"\\uAAF3\", \"\\uAAF4\"], [\"\\uAB5C\", \"\\uAB5F\"], \"\\uFF70\", [\"\\uFF9E\", \"\\uFF9F\"]], false, false),\r\n      peg$c122 = /^[\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60-\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0CF1-\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5-\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A-\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD-\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\r\n      peg$c123 = peg$classExpectation([\"\\xAA\", \"\\xBA\", \"\\u01BB\", [\"\\u01C0\", \"\\u01C3\"], \"\\u0294\", [\"\\u05D0\", \"\\u05EA\"], [\"\\u05EF\", \"\\u05F2\"], [\"\\u0620\", \"\\u063F\"], [\"\\u0641\", \"\\u064A\"], [\"\\u066E\", \"\\u066F\"], [\"\\u0671\", \"\\u06D3\"], \"\\u06D5\", [\"\\u06EE\", \"\\u06EF\"], [\"\\u06FA\", \"\\u06FC\"], \"\\u06FF\", \"\\u0710\", [\"\\u0712\", \"\\u072F\"], [\"\\u074D\", \"\\u07A5\"], \"\\u07B1\", [\"\\u07CA\", \"\\u07EA\"], [\"\\u0800\", \"\\u0815\"], [\"\\u0840\", \"\\u0858\"], [\"\\u0860\", \"\\u086A\"], [\"\\u08A0\", \"\\u08B4\"], [\"\\u08B6\", \"\\u08BD\"], [\"\\u0904\", \"\\u0939\"], \"\\u093D\", \"\\u0950\", [\"\\u0958\", \"\\u0961\"], [\"\\u0972\", \"\\u0980\"], [\"\\u0985\", \"\\u098C\"], [\"\\u098F\", \"\\u0990\"], [\"\\u0993\", \"\\u09A8\"], [\"\\u09AA\", \"\\u09B0\"], \"\\u09B2\", [\"\\u09B6\", \"\\u09B9\"], \"\\u09BD\", \"\\u09CE\", [\"\\u09DC\", \"\\u09DD\"], [\"\\u09DF\", \"\\u09E1\"], [\"\\u09F0\", \"\\u09F1\"], \"\\u09FC\", [\"\\u0A05\", \"\\u0A0A\"], [\"\\u0A0F\", \"\\u0A10\"], [\"\\u0A13\", \"\\u0A28\"], [\"\\u0A2A\", \"\\u0A30\"], [\"\\u0A32\", \"\\u0A33\"], [\"\\u0A35\", \"\\u0A36\"], [\"\\u0A38\", \"\\u0A39\"], [\"\\u0A59\", \"\\u0A5C\"], \"\\u0A5E\", [\"\\u0A72\", \"\\u0A74\"], [\"\\u0A85\", \"\\u0A8D\"], [\"\\u0A8F\", \"\\u0A91\"], [\"\\u0A93\", \"\\u0AA8\"], [\"\\u0AAA\", \"\\u0AB0\"], [\"\\u0AB2\", \"\\u0AB3\"], [\"\\u0AB5\", \"\\u0AB9\"], \"\\u0ABD\", \"\\u0AD0\", [\"\\u0AE0\", \"\\u0AE1\"], \"\\u0AF9\", [\"\\u0B05\", \"\\u0B0C\"], [\"\\u0B0F\", \"\\u0B10\"], [\"\\u0B13\", \"\\u0B28\"], [\"\\u0B2A\", \"\\u0B30\"], [\"\\u0B32\", \"\\u0B33\"], [\"\\u0B35\", \"\\u0B39\"], \"\\u0B3D\", [\"\\u0B5C\", \"\\u0B5D\"], [\"\\u0B5F\", \"\\u0B61\"], \"\\u0B71\", \"\\u0B83\", [\"\\u0B85\", \"\\u0B8A\"], [\"\\u0B8E\", \"\\u0B90\"], [\"\\u0B92\", \"\\u0B95\"], [\"\\u0B99\", \"\\u0B9A\"], \"\\u0B9C\", [\"\\u0B9E\", \"\\u0B9F\"], [\"\\u0BA3\", \"\\u0BA4\"], [\"\\u0BA8\", \"\\u0BAA\"], [\"\\u0BAE\", \"\\u0BB9\"], \"\\u0BD0\", [\"\\u0C05\", \"\\u0C0C\"], [\"\\u0C0E\", \"\\u0C10\"], [\"\\u0C12\", \"\\u0C28\"], [\"\\u0C2A\", \"\\u0C39\"], \"\\u0C3D\", [\"\\u0C58\", \"\\u0C5A\"], [\"\\u0C60\", \"\\u0C61\"], \"\\u0C80\", [\"\\u0C85\", \"\\u0C8C\"], [\"\\u0C8E\", \"\\u0C90\"], [\"\\u0C92\", \"\\u0CA8\"], [\"\\u0CAA\", \"\\u0CB3\"], [\"\\u0CB5\", \"\\u0CB9\"], \"\\u0CBD\", \"\\u0CDE\", [\"\\u0CE0\", \"\\u0CE1\"], [\"\\u0CF1\", \"\\u0CF2\"], [\"\\u0D05\", \"\\u0D0C\"], [\"\\u0D0E\", \"\\u0D10\"], [\"\\u0D12\", \"\\u0D3A\"], \"\\u0D3D\", \"\\u0D4E\", [\"\\u0D54\", \"\\u0D56\"], [\"\\u0D5F\", \"\\u0D61\"], [\"\\u0D7A\", \"\\u0D7F\"], [\"\\u0D85\", \"\\u0D96\"], [\"\\u0D9A\", \"\\u0DB1\"], [\"\\u0DB3\", \"\\u0DBB\"], \"\\u0DBD\", [\"\\u0DC0\", \"\\u0DC6\"], [\"\\u0E01\", \"\\u0E30\"], [\"\\u0E32\", \"\\u0E33\"], [\"\\u0E40\", \"\\u0E45\"], [\"\\u0E81\", \"\\u0E82\"], \"\\u0E84\", [\"\\u0E87\", \"\\u0E88\"], \"\\u0E8A\", \"\\u0E8D\", [\"\\u0E94\", \"\\u0E97\"], [\"\\u0E99\", \"\\u0E9F\"], [\"\\u0EA1\", \"\\u0EA3\"], \"\\u0EA5\", \"\\u0EA7\", [\"\\u0EAA\", \"\\u0EAB\"], [\"\\u0EAD\", \"\\u0EB0\"], [\"\\u0EB2\", \"\\u0EB3\"], \"\\u0EBD\", [\"\\u0EC0\", \"\\u0EC4\"], [\"\\u0EDC\", \"\\u0EDF\"], \"\\u0F00\", [\"\\u0F40\", \"\\u0F47\"], [\"\\u0F49\", \"\\u0F6C\"], [\"\\u0F88\", \"\\u0F8C\"], [\"\\u1000\", \"\\u102A\"], \"\\u103F\", [\"\\u1050\", \"\\u1055\"], [\"\\u105A\", \"\\u105D\"], \"\\u1061\", [\"\\u1065\", \"\\u1066\"], [\"\\u106E\", \"\\u1070\"], [\"\\u1075\", \"\\u1081\"], \"\\u108E\", [\"\\u1100\", \"\\u1248\"], [\"\\u124A\", \"\\u124D\"], [\"\\u1250\", \"\\u1256\"], \"\\u1258\", [\"\\u125A\", \"\\u125D\"], [\"\\u1260\", \"\\u1288\"], [\"\\u128A\", \"\\u128D\"], [\"\\u1290\", \"\\u12B0\"], [\"\\u12B2\", \"\\u12B5\"], [\"\\u12B8\", \"\\u12BE\"], \"\\u12C0\", [\"\\u12C2\", \"\\u12C5\"], [\"\\u12C8\", \"\\u12D6\"], [\"\\u12D8\", \"\\u1310\"], [\"\\u1312\", \"\\u1315\"], [\"\\u1318\", \"\\u135A\"], [\"\\u1380\", \"\\u138F\"], [\"\\u1401\", \"\\u166C\"], [\"\\u166F\", \"\\u167F\"], [\"\\u1681\", \"\\u169A\"], [\"\\u16A0\", \"\\u16EA\"], [\"\\u16F1\", \"\\u16F8\"], [\"\\u1700\", \"\\u170C\"], [\"\\u170E\", \"\\u1711\"], [\"\\u1720\", \"\\u1731\"], [\"\\u1740\", \"\\u1751\"], [\"\\u1760\", \"\\u176C\"], [\"\\u176E\", \"\\u1770\"], [\"\\u1780\", \"\\u17B3\"], \"\\u17DC\", [\"\\u1820\", \"\\u1842\"], [\"\\u1844\", \"\\u1878\"], [\"\\u1880\", \"\\u1884\"], [\"\\u1887\", \"\\u18A8\"], \"\\u18AA\", [\"\\u18B0\", \"\\u18F5\"], [\"\\u1900\", \"\\u191E\"], [\"\\u1950\", \"\\u196D\"], [\"\\u1970\", \"\\u1974\"], [\"\\u1980\", \"\\u19AB\"], [\"\\u19B0\", \"\\u19C9\"], [\"\\u1A00\", \"\\u1A16\"], [\"\\u1A20\", \"\\u1A54\"], [\"\\u1B05\", \"\\u1B33\"], [\"\\u1B45\", \"\\u1B4B\"], [\"\\u1B83\", \"\\u1BA0\"], [\"\\u1BAE\", \"\\u1BAF\"], [\"\\u1BBA\", \"\\u1BE5\"], [\"\\u1C00\", \"\\u1C23\"], [\"\\u1C4D\", \"\\u1C4F\"], [\"\\u1C5A\", \"\\u1C77\"], [\"\\u1CE9\", \"\\u1CEC\"], [\"\\u1CEE\", \"\\u1CF1\"], [\"\\u1CF5\", \"\\u1CF6\"], [\"\\u2135\", \"\\u2138\"], [\"\\u2D30\", \"\\u2D67\"], [\"\\u2D80\", \"\\u2D96\"], [\"\\u2DA0\", \"\\u2DA6\"], [\"\\u2DA8\", \"\\u2DAE\"], [\"\\u2DB0\", \"\\u2DB6\"], [\"\\u2DB8\", \"\\u2DBE\"], [\"\\u2DC0\", \"\\u2DC6\"], [\"\\u2DC8\", \"\\u2DCE\"], [\"\\u2DD0\", \"\\u2DD6\"], [\"\\u2DD8\", \"\\u2DDE\"], \"\\u3006\", \"\\u303C\", [\"\\u3041\", \"\\u3096\"], \"\\u309F\", [\"\\u30A1\", \"\\u30FA\"], \"\\u30FF\", [\"\\u3105\", \"\\u312F\"], [\"\\u3131\", \"\\u318E\"], [\"\\u31A0\", \"\\u31BA\"], [\"\\u31F0\", \"\\u31FF\"], [\"\\u3400\", \"\\u4DB5\"], [\"\\u4E00\", \"\\u9FEF\"], [\"\\uA000\", \"\\uA014\"], [\"\\uA016\", \"\\uA48C\"], [\"\\uA4D0\", \"\\uA4F7\"], [\"\\uA500\", \"\\uA60B\"], [\"\\uA610\", \"\\uA61F\"], [\"\\uA62A\", \"\\uA62B\"], \"\\uA66E\", [\"\\uA6A0\", \"\\uA6E5\"], \"\\uA78F\", \"\\uA7F7\", [\"\\uA7FB\", \"\\uA801\"], [\"\\uA803\", \"\\uA805\"], [\"\\uA807\", \"\\uA80A\"], [\"\\uA80C\", \"\\uA822\"], [\"\\uA840\", \"\\uA873\"], [\"\\uA882\", \"\\uA8B3\"], [\"\\uA8F2\", \"\\uA8F7\"], \"\\uA8FB\", [\"\\uA8FD\", \"\\uA8FE\"], [\"\\uA90A\", \"\\uA925\"], [\"\\uA930\", \"\\uA946\"], [\"\\uA960\", \"\\uA97C\"], [\"\\uA984\", \"\\uA9B2\"], [\"\\uA9E0\", \"\\uA9E4\"], [\"\\uA9E7\", \"\\uA9EF\"], [\"\\uA9FA\", \"\\uA9FE\"], [\"\\uAA00\", \"\\uAA28\"], [\"\\uAA40\", \"\\uAA42\"], [\"\\uAA44\", \"\\uAA4B\"], [\"\\uAA60\", \"\\uAA6F\"], [\"\\uAA71\", \"\\uAA76\"], \"\\uAA7A\", [\"\\uAA7E\", \"\\uAAAF\"], \"\\uAAB1\", [\"\\uAAB5\", \"\\uAAB6\"], [\"\\uAAB9\", \"\\uAABD\"], \"\\uAAC0\", \"\\uAAC2\", [\"\\uAADB\", \"\\uAADC\"], [\"\\uAAE0\", \"\\uAAEA\"], \"\\uAAF2\", [\"\\uAB01\", \"\\uAB06\"], [\"\\uAB09\", \"\\uAB0E\"], [\"\\uAB11\", \"\\uAB16\"], [\"\\uAB20\", \"\\uAB26\"], [\"\\uAB28\", \"\\uAB2E\"], [\"\\uABC0\", \"\\uABE2\"], [\"\\uAC00\", \"\\uD7A3\"], [\"\\uD7B0\", \"\\uD7C6\"], [\"\\uD7CB\", \"\\uD7FB\"], [\"\\uF900\", \"\\uFA6D\"], [\"\\uFA70\", \"\\uFAD9\"], \"\\uFB1D\", [\"\\uFB1F\", \"\\uFB28\"], [\"\\uFB2A\", \"\\uFB36\"], [\"\\uFB38\", \"\\uFB3C\"], \"\\uFB3E\", [\"\\uFB40\", \"\\uFB41\"], [\"\\uFB43\", \"\\uFB44\"], [\"\\uFB46\", \"\\uFBB1\"], [\"\\uFBD3\", \"\\uFD3D\"], [\"\\uFD50\", \"\\uFD8F\"], [\"\\uFD92\", \"\\uFDC7\"], [\"\\uFDF0\", \"\\uFDFB\"], [\"\\uFE70\", \"\\uFE74\"], [\"\\uFE76\", \"\\uFEFC\"], [\"\\uFF66\", \"\\uFF6F\"], [\"\\uFF71\", \"\\uFF9D\"], [\"\\uFFA0\", \"\\uFFBE\"], [\"\\uFFC2\", \"\\uFFC7\"], [\"\\uFFCA\", \"\\uFFCF\"], [\"\\uFFD2\", \"\\uFFD7\"], [\"\\uFFDA\", \"\\uFFDC\"]], false, false),\r\n      peg$c124 = /^[\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC]/,\r\n      peg$c125 = peg$classExpectation([\"\\u01C5\", \"\\u01C8\", \"\\u01CB\", \"\\u01F2\", [\"\\u1F88\", \"\\u1F8F\"], [\"\\u1F98\", \"\\u1F9F\"], [\"\\u1FA8\", \"\\u1FAF\"], \"\\u1FBC\", \"\\u1FCC\", \"\\u1FFC\"], false, false),\r\n      peg$c126 = /^[A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178-\\u0179\\u017B\\u017D\\u0181-\\u0182\\u0184\\u0186-\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193-\\u0194\\u0196-\\u0198\\u019C-\\u019D\\u019F-\\u01A0\\u01A2\\u01A4\\u01A6-\\u01A7\\u01A9\\u01AC\\u01AE-\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7-\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A-\\u023B\\u023D-\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9-\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0-\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E-\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D-\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uA7B8\\uFF21-\\uFF3A]/,\r\n      peg$c127 = peg$classExpectation([[\"A\", \"Z\"], [\"\\xC0\", \"\\xD6\"], [\"\\xD8\", \"\\xDE\"], \"\\u0100\", \"\\u0102\", \"\\u0104\", \"\\u0106\", \"\\u0108\", \"\\u010A\", \"\\u010C\", \"\\u010E\", \"\\u0110\", \"\\u0112\", \"\\u0114\", \"\\u0116\", \"\\u0118\", \"\\u011A\", \"\\u011C\", \"\\u011E\", \"\\u0120\", \"\\u0122\", \"\\u0124\", \"\\u0126\", \"\\u0128\", \"\\u012A\", \"\\u012C\", \"\\u012E\", \"\\u0130\", \"\\u0132\", \"\\u0134\", \"\\u0136\", \"\\u0139\", \"\\u013B\", \"\\u013D\", \"\\u013F\", \"\\u0141\", \"\\u0143\", \"\\u0145\", \"\\u0147\", \"\\u014A\", \"\\u014C\", \"\\u014E\", \"\\u0150\", \"\\u0152\", \"\\u0154\", \"\\u0156\", \"\\u0158\", \"\\u015A\", \"\\u015C\", \"\\u015E\", \"\\u0160\", \"\\u0162\", \"\\u0164\", \"\\u0166\", \"\\u0168\", \"\\u016A\", \"\\u016C\", \"\\u016E\", \"\\u0170\", \"\\u0172\", \"\\u0174\", \"\\u0176\", [\"\\u0178\", \"\\u0179\"], \"\\u017B\", \"\\u017D\", [\"\\u0181\", \"\\u0182\"], \"\\u0184\", [\"\\u0186\", \"\\u0187\"], [\"\\u0189\", \"\\u018B\"], [\"\\u018E\", \"\\u0191\"], [\"\\u0193\", \"\\u0194\"], [\"\\u0196\", \"\\u0198\"], [\"\\u019C\", \"\\u019D\"], [\"\\u019F\", \"\\u01A0\"], \"\\u01A2\", \"\\u01A4\", [\"\\u01A6\", \"\\u01A7\"], \"\\u01A9\", \"\\u01AC\", [\"\\u01AE\", \"\\u01AF\"], [\"\\u01B1\", \"\\u01B3\"], \"\\u01B5\", [\"\\u01B7\", \"\\u01B8\"], \"\\u01BC\", \"\\u01C4\", \"\\u01C7\", \"\\u01CA\", \"\\u01CD\", \"\\u01CF\", \"\\u01D1\", \"\\u01D3\", \"\\u01D5\", \"\\u01D7\", \"\\u01D9\", \"\\u01DB\", \"\\u01DE\", \"\\u01E0\", \"\\u01E2\", \"\\u01E4\", \"\\u01E6\", \"\\u01E8\", \"\\u01EA\", \"\\u01EC\", \"\\u01EE\", \"\\u01F1\", \"\\u01F4\", [\"\\u01F6\", \"\\u01F8\"], \"\\u01FA\", \"\\u01FC\", \"\\u01FE\", \"\\u0200\", \"\\u0202\", \"\\u0204\", \"\\u0206\", \"\\u0208\", \"\\u020A\", \"\\u020C\", \"\\u020E\", \"\\u0210\", \"\\u0212\", \"\\u0214\", \"\\u0216\", \"\\u0218\", \"\\u021A\", \"\\u021C\", \"\\u021E\", \"\\u0220\", \"\\u0222\", \"\\u0224\", \"\\u0226\", \"\\u0228\", \"\\u022A\", \"\\u022C\", \"\\u022E\", \"\\u0230\", \"\\u0232\", [\"\\u023A\", \"\\u023B\"], [\"\\u023D\", \"\\u023E\"], \"\\u0241\", [\"\\u0243\", \"\\u0246\"], \"\\u0248\", \"\\u024A\", \"\\u024C\", \"\\u024E\", \"\\u0370\", \"\\u0372\", \"\\u0376\", \"\\u037F\", \"\\u0386\", [\"\\u0388\", \"\\u038A\"], \"\\u038C\", [\"\\u038E\", \"\\u038F\"], [\"\\u0391\", \"\\u03A1\"], [\"\\u03A3\", \"\\u03AB\"], \"\\u03CF\", [\"\\u03D2\", \"\\u03D4\"], \"\\u03D8\", \"\\u03DA\", \"\\u03DC\", \"\\u03DE\", \"\\u03E0\", \"\\u03E2\", \"\\u03E4\", \"\\u03E6\", \"\\u03E8\", \"\\u03EA\", \"\\u03EC\", \"\\u03EE\", \"\\u03F4\", \"\\u03F7\", [\"\\u03F9\", \"\\u03FA\"], [\"\\u03FD\", \"\\u042F\"], \"\\u0460\", \"\\u0462\", \"\\u0464\", \"\\u0466\", \"\\u0468\", \"\\u046A\", \"\\u046C\", \"\\u046E\", \"\\u0470\", \"\\u0472\", \"\\u0474\", \"\\u0476\", \"\\u0478\", \"\\u047A\", \"\\u047C\", \"\\u047E\", \"\\u0480\", \"\\u048A\", \"\\u048C\", \"\\u048E\", \"\\u0490\", \"\\u0492\", \"\\u0494\", \"\\u0496\", \"\\u0498\", \"\\u049A\", \"\\u049C\", \"\\u049E\", \"\\u04A0\", \"\\u04A2\", \"\\u04A4\", \"\\u04A6\", \"\\u04A8\", \"\\u04AA\", \"\\u04AC\", \"\\u04AE\", \"\\u04B0\", \"\\u04B2\", \"\\u04B4\", \"\\u04B6\", \"\\u04B8\", \"\\u04BA\", \"\\u04BC\", \"\\u04BE\", [\"\\u04C0\", \"\\u04C1\"], \"\\u04C3\", \"\\u04C5\", \"\\u04C7\", \"\\u04C9\", \"\\u04CB\", \"\\u04CD\", \"\\u04D0\", \"\\u04D2\", \"\\u04D4\", \"\\u04D6\", \"\\u04D8\", \"\\u04DA\", \"\\u04DC\", \"\\u04DE\", \"\\u04E0\", \"\\u04E2\", \"\\u04E4\", \"\\u04E6\", \"\\u04E8\", \"\\u04EA\", \"\\u04EC\", \"\\u04EE\", \"\\u04F0\", \"\\u04F2\", \"\\u04F4\", \"\\u04F6\", \"\\u04F8\", \"\\u04FA\", \"\\u04FC\", \"\\u04FE\", \"\\u0500\", \"\\u0502\", \"\\u0504\", \"\\u0506\", \"\\u0508\", \"\\u050A\", \"\\u050C\", \"\\u050E\", \"\\u0510\", \"\\u0512\", \"\\u0514\", \"\\u0516\", \"\\u0518\", \"\\u051A\", \"\\u051C\", \"\\u051E\", \"\\u0520\", \"\\u0522\", \"\\u0524\", \"\\u0526\", \"\\u0528\", \"\\u052A\", \"\\u052C\", \"\\u052E\", [\"\\u0531\", \"\\u0556\"], [\"\\u10A0\", \"\\u10C5\"], \"\\u10C7\", \"\\u10CD\", [\"\\u13A0\", \"\\u13F5\"], [\"\\u1C90\", \"\\u1CBA\"], [\"\\u1CBD\", \"\\u1CBF\"], \"\\u1E00\", \"\\u1E02\", \"\\u1E04\", \"\\u1E06\", \"\\u1E08\", \"\\u1E0A\", \"\\u1E0C\", \"\\u1E0E\", \"\\u1E10\", \"\\u1E12\", \"\\u1E14\", \"\\u1E16\", \"\\u1E18\", \"\\u1E1A\", \"\\u1E1C\", \"\\u1E1E\", \"\\u1E20\", \"\\u1E22\", \"\\u1E24\", \"\\u1E26\", \"\\u1E28\", \"\\u1E2A\", \"\\u1E2C\", \"\\u1E2E\", \"\\u1E30\", \"\\u1E32\", \"\\u1E34\", \"\\u1E36\", \"\\u1E38\", \"\\u1E3A\", \"\\u1E3C\", \"\\u1E3E\", \"\\u1E40\", \"\\u1E42\", \"\\u1E44\", \"\\u1E46\", \"\\u1E48\", \"\\u1E4A\", \"\\u1E4C\", \"\\u1E4E\", \"\\u1E50\", \"\\u1E52\", \"\\u1E54\", \"\\u1E56\", \"\\u1E58\", \"\\u1E5A\", \"\\u1E5C\", \"\\u1E5E\", \"\\u1E60\", \"\\u1E62\", \"\\u1E64\", \"\\u1E66\", \"\\u1E68\", \"\\u1E6A\", \"\\u1E6C\", \"\\u1E6E\", \"\\u1E70\", \"\\u1E72\", \"\\u1E74\", \"\\u1E76\", \"\\u1E78\", \"\\u1E7A\", \"\\u1E7C\", \"\\u1E7E\", \"\\u1E80\", \"\\u1E82\", \"\\u1E84\", \"\\u1E86\", \"\\u1E88\", \"\\u1E8A\", \"\\u1E8C\", \"\\u1E8E\", \"\\u1E90\", \"\\u1E92\", \"\\u1E94\", \"\\u1E9E\", \"\\u1EA0\", \"\\u1EA2\", \"\\u1EA4\", \"\\u1EA6\", \"\\u1EA8\", \"\\u1EAA\", \"\\u1EAC\", \"\\u1EAE\", \"\\u1EB0\", \"\\u1EB2\", \"\\u1EB4\", \"\\u1EB6\", \"\\u1EB8\", \"\\u1EBA\", \"\\u1EBC\", \"\\u1EBE\", \"\\u1EC0\", \"\\u1EC2\", \"\\u1EC4\", \"\\u1EC6\", \"\\u1EC8\", \"\\u1ECA\", \"\\u1ECC\", \"\\u1ECE\", \"\\u1ED0\", \"\\u1ED2\", \"\\u1ED4\", \"\\u1ED6\", \"\\u1ED8\", \"\\u1EDA\", \"\\u1EDC\", \"\\u1EDE\", \"\\u1EE0\", \"\\u1EE2\", \"\\u1EE4\", \"\\u1EE6\", \"\\u1EE8\", \"\\u1EEA\", \"\\u1EEC\", \"\\u1EEE\", \"\\u1EF0\", \"\\u1EF2\", \"\\u1EF4\", \"\\u1EF6\", \"\\u1EF8\", \"\\u1EFA\", \"\\u1EFC\", \"\\u1EFE\", [\"\\u1F08\", \"\\u1F0F\"], [\"\\u1F18\", \"\\u1F1D\"], [\"\\u1F28\", \"\\u1F2F\"], [\"\\u1F38\", \"\\u1F3F\"], [\"\\u1F48\", \"\\u1F4D\"], \"\\u1F59\", \"\\u1F5B\", \"\\u1F5D\", \"\\u1F5F\", [\"\\u1F68\", \"\\u1F6F\"], [\"\\u1FB8\", \"\\u1FBB\"], [\"\\u1FC8\", \"\\u1FCB\"], [\"\\u1FD8\", \"\\u1FDB\"], [\"\\u1FE8\", \"\\u1FEC\"], [\"\\u1FF8\", \"\\u1FFB\"], \"\\u2102\", \"\\u2107\", [\"\\u210B\", \"\\u210D\"], [\"\\u2110\", \"\\u2112\"], \"\\u2115\", [\"\\u2119\", \"\\u211D\"], \"\\u2124\", \"\\u2126\", \"\\u2128\", [\"\\u212A\", \"\\u212D\"], [\"\\u2130\", \"\\u2133\"], [\"\\u213E\", \"\\u213F\"], \"\\u2145\", \"\\u2183\", [\"\\u2C00\", \"\\u2C2E\"], \"\\u2C60\", [\"\\u2C62\", \"\\u2C64\"], \"\\u2C67\", \"\\u2C69\", \"\\u2C6B\", [\"\\u2C6D\", \"\\u2C70\"], \"\\u2C72\", \"\\u2C75\", [\"\\u2C7E\", \"\\u2C80\"], \"\\u2C82\", \"\\u2C84\", \"\\u2C86\", \"\\u2C88\", \"\\u2C8A\", \"\\u2C8C\", \"\\u2C8E\", \"\\u2C90\", \"\\u2C92\", \"\\u2C94\", \"\\u2C96\", \"\\u2C98\", \"\\u2C9A\", \"\\u2C9C\", \"\\u2C9E\", \"\\u2CA0\", \"\\u2CA2\", \"\\u2CA4\", \"\\u2CA6\", \"\\u2CA8\", \"\\u2CAA\", \"\\u2CAC\", \"\\u2CAE\", \"\\u2CB0\", \"\\u2CB2\", \"\\u2CB4\", \"\\u2CB6\", \"\\u2CB8\", \"\\u2CBA\", \"\\u2CBC\", \"\\u2CBE\", \"\\u2CC0\", \"\\u2CC2\", \"\\u2CC4\", \"\\u2CC6\", \"\\u2CC8\", \"\\u2CCA\", \"\\u2CCC\", \"\\u2CCE\", \"\\u2CD0\", \"\\u2CD2\", \"\\u2CD4\", \"\\u2CD6\", \"\\u2CD8\", \"\\u2CDA\", \"\\u2CDC\", \"\\u2CDE\", \"\\u2CE0\", \"\\u2CE2\", \"\\u2CEB\", \"\\u2CED\", \"\\u2CF2\", \"\\uA640\", \"\\uA642\", \"\\uA644\", \"\\uA646\", \"\\uA648\", \"\\uA64A\", \"\\uA64C\", \"\\uA64E\", \"\\uA650\", \"\\uA652\", \"\\uA654\", \"\\uA656\", \"\\uA658\", \"\\uA65A\", \"\\uA65C\", \"\\uA65E\", \"\\uA660\", \"\\uA662\", \"\\uA664\", \"\\uA666\", \"\\uA668\", \"\\uA66A\", \"\\uA66C\", \"\\uA680\", \"\\uA682\", \"\\uA684\", \"\\uA686\", \"\\uA688\", \"\\uA68A\", \"\\uA68C\", \"\\uA68E\", \"\\uA690\", \"\\uA692\", \"\\uA694\", \"\\uA696\", \"\\uA698\", \"\\uA69A\", \"\\uA722\", \"\\uA724\", \"\\uA726\", \"\\uA728\", \"\\uA72A\", \"\\uA72C\", \"\\uA72E\", \"\\uA732\", \"\\uA734\", \"\\uA736\", \"\\uA738\", \"\\uA73A\", \"\\uA73C\", \"\\uA73E\", \"\\uA740\", \"\\uA742\", \"\\uA744\", \"\\uA746\", \"\\uA748\", \"\\uA74A\", \"\\uA74C\", \"\\uA74E\", \"\\uA750\", \"\\uA752\", \"\\uA754\", \"\\uA756\", \"\\uA758\", \"\\uA75A\", \"\\uA75C\", \"\\uA75E\", \"\\uA760\", \"\\uA762\", \"\\uA764\", \"\\uA766\", \"\\uA768\", \"\\uA76A\", \"\\uA76C\", \"\\uA76E\", \"\\uA779\", \"\\uA77B\", [\"\\uA77D\", \"\\uA77E\"], \"\\uA780\", \"\\uA782\", \"\\uA784\", \"\\uA786\", \"\\uA78B\", \"\\uA78D\", \"\\uA790\", \"\\uA792\", \"\\uA796\", \"\\uA798\", \"\\uA79A\", \"\\uA79C\", \"\\uA79E\", \"\\uA7A0\", \"\\uA7A2\", \"\\uA7A4\", \"\\uA7A6\", \"\\uA7A8\", [\"\\uA7AA\", \"\\uA7AE\"], [\"\\uA7B0\", \"\\uA7B4\"], \"\\uA7B6\", \"\\uA7B8\", [\"\\uFF21\", \"\\uFF3A\"]], false, false),\r\n      peg$c128 = /^[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BE-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B3E\\u0B40\\u0B47-\\u0B48\\u0B4B-\\u0B4C\\u0B57\\u0BBE-\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0CD5-\\u0CD6\\u0D02-\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82-\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2-\\u0DF3\\u0F3E-\\u0F3F\\u0F7F\\u102B-\\u102C\\u1031\\u1038\\u103B-\\u103C\\u1056-\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083-\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u1A19-\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63-\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B44\\u1B82\\u1BA1\\u1BA6-\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2-\\u1BF3\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CE1\\u1CF2-\\u1CF3\\u1CF7\\u302E-\\u302F\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952-\\uA953\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BD-\\uA9C0\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA\\uABEC]/,\r\n      peg$c129 = peg$classExpectation([\"\\u0903\", \"\\u093B\", [\"\\u093E\", \"\\u0940\"], [\"\\u0949\", \"\\u094C\"], [\"\\u094E\", \"\\u094F\"], [\"\\u0982\", \"\\u0983\"], [\"\\u09BE\", \"\\u09C0\"], [\"\\u09C7\", \"\\u09C8\"], [\"\\u09CB\", \"\\u09CC\"], \"\\u09D7\", \"\\u0A03\", [\"\\u0A3E\", \"\\u0A40\"], \"\\u0A83\", [\"\\u0ABE\", \"\\u0AC0\"], \"\\u0AC9\", [\"\\u0ACB\", \"\\u0ACC\"], [\"\\u0B02\", \"\\u0B03\"], \"\\u0B3E\", \"\\u0B40\", [\"\\u0B47\", \"\\u0B48\"], [\"\\u0B4B\", \"\\u0B4C\"], \"\\u0B57\", [\"\\u0BBE\", \"\\u0BBF\"], [\"\\u0BC1\", \"\\u0BC2\"], [\"\\u0BC6\", \"\\u0BC8\"], [\"\\u0BCA\", \"\\u0BCC\"], \"\\u0BD7\", [\"\\u0C01\", \"\\u0C03\"], [\"\\u0C41\", \"\\u0C44\"], [\"\\u0C82\", \"\\u0C83\"], \"\\u0CBE\", [\"\\u0CC0\", \"\\u0CC4\"], [\"\\u0CC7\", \"\\u0CC8\"], [\"\\u0CCA\", \"\\u0CCB\"], [\"\\u0CD5\", \"\\u0CD6\"], [\"\\u0D02\", \"\\u0D03\"], [\"\\u0D3E\", \"\\u0D40\"], [\"\\u0D46\", \"\\u0D48\"], [\"\\u0D4A\", \"\\u0D4C\"], \"\\u0D57\", [\"\\u0D82\", \"\\u0D83\"], [\"\\u0DCF\", \"\\u0DD1\"], [\"\\u0DD8\", \"\\u0DDF\"], [\"\\u0DF2\", \"\\u0DF3\"], [\"\\u0F3E\", \"\\u0F3F\"], \"\\u0F7F\", [\"\\u102B\", \"\\u102C\"], \"\\u1031\", \"\\u1038\", [\"\\u103B\", \"\\u103C\"], [\"\\u1056\", \"\\u1057\"], [\"\\u1062\", \"\\u1064\"], [\"\\u1067\", \"\\u106D\"], [\"\\u1083\", \"\\u1084\"], [\"\\u1087\", \"\\u108C\"], \"\\u108F\", [\"\\u109A\", \"\\u109C\"], \"\\u17B6\", [\"\\u17BE\", \"\\u17C5\"], [\"\\u17C7\", \"\\u17C8\"], [\"\\u1923\", \"\\u1926\"], [\"\\u1929\", \"\\u192B\"], [\"\\u1930\", \"\\u1931\"], [\"\\u1933\", \"\\u1938\"], [\"\\u1A19\", \"\\u1A1A\"], \"\\u1A55\", \"\\u1A57\", \"\\u1A61\", [\"\\u1A63\", \"\\u1A64\"], [\"\\u1A6D\", \"\\u1A72\"], \"\\u1B04\", \"\\u1B35\", \"\\u1B3B\", [\"\\u1B3D\", \"\\u1B41\"], [\"\\u1B43\", \"\\u1B44\"], \"\\u1B82\", \"\\u1BA1\", [\"\\u1BA6\", \"\\u1BA7\"], \"\\u1BAA\", \"\\u1BE7\", [\"\\u1BEA\", \"\\u1BEC\"], \"\\u1BEE\", [\"\\u1BF2\", \"\\u1BF3\"], [\"\\u1C24\", \"\\u1C2B\"], [\"\\u1C34\", \"\\u1C35\"], \"\\u1CE1\", [\"\\u1CF2\", \"\\u1CF3\"], \"\\u1CF7\", [\"\\u302E\", \"\\u302F\"], [\"\\uA823\", \"\\uA824\"], \"\\uA827\", [\"\\uA880\", \"\\uA881\"], [\"\\uA8B4\", \"\\uA8C3\"], [\"\\uA952\", \"\\uA953\"], \"\\uA983\", [\"\\uA9B4\", \"\\uA9B5\"], [\"\\uA9BA\", \"\\uA9BB\"], [\"\\uA9BD\", \"\\uA9C0\"], [\"\\uAA2F\", \"\\uAA30\"], [\"\\uAA33\", \"\\uAA34\"], \"\\uAA4D\", \"\\uAA7B\", \"\\uAA7D\", \"\\uAAEB\", [\"\\uAAEE\", \"\\uAAEF\"], \"\\uAAF5\", [\"\\uABE3\", \"\\uABE4\"], [\"\\uABE6\", \"\\uABE7\"], [\"\\uABE9\", \"\\uABEA\"], \"\\uABEC\"], false, false),\r\n      peg$c130 = /^[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1-\\u05C2\\u05C4-\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7-\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962-\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2-\\u09E3\\u09FE\\u0A01-\\u0A02\\u0A3C\\u0A41-\\u0A42\\u0A47-\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70-\\u0A71\\u0A75\\u0A81-\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7-\\u0AC8\\u0ACD\\u0AE2-\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62-\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55-\\u0C56\\u0C62-\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC-\\u0CCD\\u0CE2-\\u0CE3\\u0D00-\\u0D01\\u0D3B-\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62-\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB-\\u0EBC\\u0EC8-\\u0ECD\\u0F18-\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86-\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039-\\u103A\\u103D-\\u103E\\u1058-\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085-\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752-\\u1753\\u1772-\\u1773\\u17B4-\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885-\\u1886\\u18A9\\u1920-\\u1922\\u1927-\\u1928\\u1932\\u1939-\\u193B\\u1A17-\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80-\\u1B81\\u1BA2-\\u1BA5\\u1BA8-\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8-\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099-\\u309A\\uA66F\\uA674-\\uA67D\\uA69E-\\uA69F\\uA6F0-\\uA6F1\\uA802\\uA806\\uA80B\\uA825-\\uA826\\uA8C4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5\\uAA29-\\uAA2E\\uAA31-\\uAA32\\uAA35-\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7-\\uAAB8\\uAABE-\\uAABF\\uAAC1\\uAAEC-\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F]/,\r\n      peg$c131 = peg$classExpectation([[\"\\u0300\", \"\\u036F\"], [\"\\u0483\", \"\\u0487\"], [\"\\u0591\", \"\\u05BD\"], \"\\u05BF\", [\"\\u05C1\", \"\\u05C2\"], [\"\\u05C4\", \"\\u05C5\"], \"\\u05C7\", [\"\\u0610\", \"\\u061A\"], [\"\\u064B\", \"\\u065F\"], \"\\u0670\", [\"\\u06D6\", \"\\u06DC\"], [\"\\u06DF\", \"\\u06E4\"], [\"\\u06E7\", \"\\u06E8\"], [\"\\u06EA\", \"\\u06ED\"], \"\\u0711\", [\"\\u0730\", \"\\u074A\"], [\"\\u07A6\", \"\\u07B0\"], [\"\\u07EB\", \"\\u07F3\"], \"\\u07FD\", [\"\\u0816\", \"\\u0819\"], [\"\\u081B\", \"\\u0823\"], [\"\\u0825\", \"\\u0827\"], [\"\\u0829\", \"\\u082D\"], [\"\\u0859\", \"\\u085B\"], [\"\\u08D3\", \"\\u08E1\"], [\"\\u08E3\", \"\\u0902\"], \"\\u093A\", \"\\u093C\", [\"\\u0941\", \"\\u0948\"], \"\\u094D\", [\"\\u0951\", \"\\u0957\"], [\"\\u0962\", \"\\u0963\"], \"\\u0981\", \"\\u09BC\", [\"\\u09C1\", \"\\u09C4\"], \"\\u09CD\", [\"\\u09E2\", \"\\u09E3\"], \"\\u09FE\", [\"\\u0A01\", \"\\u0A02\"], \"\\u0A3C\", [\"\\u0A41\", \"\\u0A42\"], [\"\\u0A47\", \"\\u0A48\"], [\"\\u0A4B\", \"\\u0A4D\"], \"\\u0A51\", [\"\\u0A70\", \"\\u0A71\"], \"\\u0A75\", [\"\\u0A81\", \"\\u0A82\"], \"\\u0ABC\", [\"\\u0AC1\", \"\\u0AC5\"], [\"\\u0AC7\", \"\\u0AC8\"], \"\\u0ACD\", [\"\\u0AE2\", \"\\u0AE3\"], [\"\\u0AFA\", \"\\u0AFF\"], \"\\u0B01\", \"\\u0B3C\", \"\\u0B3F\", [\"\\u0B41\", \"\\u0B44\"], \"\\u0B4D\", \"\\u0B56\", [\"\\u0B62\", \"\\u0B63\"], \"\\u0B82\", \"\\u0BC0\", \"\\u0BCD\", \"\\u0C00\", \"\\u0C04\", [\"\\u0C3E\", \"\\u0C40\"], [\"\\u0C46\", \"\\u0C48\"], [\"\\u0C4A\", \"\\u0C4D\"], [\"\\u0C55\", \"\\u0C56\"], [\"\\u0C62\", \"\\u0C63\"], \"\\u0C81\", \"\\u0CBC\", \"\\u0CBF\", \"\\u0CC6\", [\"\\u0CCC\", \"\\u0CCD\"], [\"\\u0CE2\", \"\\u0CE3\"], [\"\\u0D00\", \"\\u0D01\"], [\"\\u0D3B\", \"\\u0D3C\"], [\"\\u0D41\", \"\\u0D44\"], \"\\u0D4D\", [\"\\u0D62\", \"\\u0D63\"], \"\\u0DCA\", [\"\\u0DD2\", \"\\u0DD4\"], \"\\u0DD6\", \"\\u0E31\", [\"\\u0E34\", \"\\u0E3A\"], [\"\\u0E47\", \"\\u0E4E\"], \"\\u0EB1\", [\"\\u0EB4\", \"\\u0EB9\"], [\"\\u0EBB\", \"\\u0EBC\"], [\"\\u0EC8\", \"\\u0ECD\"], [\"\\u0F18\", \"\\u0F19\"], \"\\u0F35\", \"\\u0F37\", \"\\u0F39\", [\"\\u0F71\", \"\\u0F7E\"], [\"\\u0F80\", \"\\u0F84\"], [\"\\u0F86\", \"\\u0F87\"], [\"\\u0F8D\", \"\\u0F97\"], [\"\\u0F99\", \"\\u0FBC\"], \"\\u0FC6\", [\"\\u102D\", \"\\u1030\"], [\"\\u1032\", \"\\u1037\"], [\"\\u1039\", \"\\u103A\"], [\"\\u103D\", \"\\u103E\"], [\"\\u1058\", \"\\u1059\"], [\"\\u105E\", \"\\u1060\"], [\"\\u1071\", \"\\u1074\"], \"\\u1082\", [\"\\u1085\", \"\\u1086\"], \"\\u108D\", \"\\u109D\", [\"\\u135D\", \"\\u135F\"], [\"\\u1712\", \"\\u1714\"], [\"\\u1732\", \"\\u1734\"], [\"\\u1752\", \"\\u1753\"], [\"\\u1772\", \"\\u1773\"], [\"\\u17B4\", \"\\u17B5\"], [\"\\u17B7\", \"\\u17BD\"], \"\\u17C6\", [\"\\u17C9\", \"\\u17D3\"], \"\\u17DD\", [\"\\u180B\", \"\\u180D\"], [\"\\u1885\", \"\\u1886\"], \"\\u18A9\", [\"\\u1920\", \"\\u1922\"], [\"\\u1927\", \"\\u1928\"], \"\\u1932\", [\"\\u1939\", \"\\u193B\"], [\"\\u1A17\", \"\\u1A18\"], \"\\u1A1B\", \"\\u1A56\", [\"\\u1A58\", \"\\u1A5E\"], \"\\u1A60\", \"\\u1A62\", [\"\\u1A65\", \"\\u1A6C\"], [\"\\u1A73\", \"\\u1A7C\"], \"\\u1A7F\", [\"\\u1AB0\", \"\\u1ABD\"], [\"\\u1B00\", \"\\u1B03\"], \"\\u1B34\", [\"\\u1B36\", \"\\u1B3A\"], \"\\u1B3C\", \"\\u1B42\", [\"\\u1B6B\", \"\\u1B73\"], [\"\\u1B80\", \"\\u1B81\"], [\"\\u1BA2\", \"\\u1BA5\"], [\"\\u1BA8\", \"\\u1BA9\"], [\"\\u1BAB\", \"\\u1BAD\"], \"\\u1BE6\", [\"\\u1BE8\", \"\\u1BE9\"], \"\\u1BED\", [\"\\u1BEF\", \"\\u1BF1\"], [\"\\u1C2C\", \"\\u1C33\"], [\"\\u1C36\", \"\\u1C37\"], [\"\\u1CD0\", \"\\u1CD2\"], [\"\\u1CD4\", \"\\u1CE0\"], [\"\\u1CE2\", \"\\u1CE8\"], \"\\u1CED\", \"\\u1CF4\", [\"\\u1CF8\", \"\\u1CF9\"], [\"\\u1DC0\", \"\\u1DF9\"], [\"\\u1DFB\", \"\\u1DFF\"], [\"\\u20D0\", \"\\u20DC\"], \"\\u20E1\", [\"\\u20E5\", \"\\u20F0\"], [\"\\u2CEF\", \"\\u2CF1\"], \"\\u2D7F\", [\"\\u2DE0\", \"\\u2DFF\"], [\"\\u302A\", \"\\u302D\"], [\"\\u3099\", \"\\u309A\"], \"\\uA66F\", [\"\\uA674\", \"\\uA67D\"], [\"\\uA69E\", \"\\uA69F\"], [\"\\uA6F0\", \"\\uA6F1\"], \"\\uA802\", \"\\uA806\", \"\\uA80B\", [\"\\uA825\", \"\\uA826\"], [\"\\uA8C4\", \"\\uA8C5\"], [\"\\uA8E0\", \"\\uA8F1\"], \"\\uA8FF\", [\"\\uA926\", \"\\uA92D\"], [\"\\uA947\", \"\\uA951\"], [\"\\uA980\", \"\\uA982\"], \"\\uA9B3\", [\"\\uA9B6\", \"\\uA9B9\"], \"\\uA9BC\", \"\\uA9E5\", [\"\\uAA29\", \"\\uAA2E\"], [\"\\uAA31\", \"\\uAA32\"], [\"\\uAA35\", \"\\uAA36\"], \"\\uAA43\", \"\\uAA4C\", \"\\uAA7C\", \"\\uAAB0\", [\"\\uAAB2\", \"\\uAAB4\"], [\"\\uAAB7\", \"\\uAAB8\"], [\"\\uAABE\", \"\\uAABF\"], \"\\uAAC1\", [\"\\uAAEC\", \"\\uAAED\"], \"\\uAAF6\", \"\\uABE5\", \"\\uABE8\", \"\\uABED\", \"\\uFB1E\", [\"\\uFE00\", \"\\uFE0F\"], [\"\\uFE20\", \"\\uFE2F\"]], false, false),\r\n      peg$c132 = /^[0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]/,\r\n      peg$c133 = peg$classExpectation([[\"0\", \"9\"], [\"\\u0660\", \"\\u0669\"], [\"\\u06F0\", \"\\u06F9\"], [\"\\u07C0\", \"\\u07C9\"], [\"\\u0966\", \"\\u096F\"], [\"\\u09E6\", \"\\u09EF\"], [\"\\u0A66\", \"\\u0A6F\"], [\"\\u0AE6\", \"\\u0AEF\"], [\"\\u0B66\", \"\\u0B6F\"], [\"\\u0BE6\", \"\\u0BEF\"], [\"\\u0C66\", \"\\u0C6F\"], [\"\\u0CE6\", \"\\u0CEF\"], [\"\\u0D66\", \"\\u0D6F\"], [\"\\u0DE6\", \"\\u0DEF\"], [\"\\u0E50\", \"\\u0E59\"], [\"\\u0ED0\", \"\\u0ED9\"], [\"\\u0F20\", \"\\u0F29\"], [\"\\u1040\", \"\\u1049\"], [\"\\u1090\", \"\\u1099\"], [\"\\u17E0\", \"\\u17E9\"], [\"\\u1810\", \"\\u1819\"], [\"\\u1946\", \"\\u194F\"], [\"\\u19D0\", \"\\u19D9\"], [\"\\u1A80\", \"\\u1A89\"], [\"\\u1A90\", \"\\u1A99\"], [\"\\u1B50\", \"\\u1B59\"], [\"\\u1BB0\", \"\\u1BB9\"], [\"\\u1C40\", \"\\u1C49\"], [\"\\u1C50\", \"\\u1C59\"], [\"\\uA620\", \"\\uA629\"], [\"\\uA8D0\", \"\\uA8D9\"], [\"\\uA900\", \"\\uA909\"], [\"\\uA9D0\", \"\\uA9D9\"], [\"\\uA9F0\", \"\\uA9F9\"], [\"\\uAA50\", \"\\uAA59\"], [\"\\uABF0\", \"\\uABF9\"], [\"\\uFF10\", \"\\uFF19\"]], false, false),\r\n      peg$c134 = /^[\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]/,\r\n      peg$c135 = peg$classExpectation([[\"\\u16EE\", \"\\u16F0\"], [\"\\u2160\", \"\\u2182\"], [\"\\u2185\", \"\\u2188\"], \"\\u3007\", [\"\\u3021\", \"\\u3029\"], [\"\\u3038\", \"\\u303A\"], [\"\\uA6E6\", \"\\uA6EF\"]], false, false),\r\n      peg$c136 = /^[_\\u203F-\\u2040\\u2054\\uFE33-\\uFE34\\uFE4D-\\uFE4F\\uFF3F]/,\r\n      peg$c137 = peg$classExpectation([\"_\", [\"\\u203F\", \"\\u2040\"], \"\\u2054\", [\"\\uFE33\", \"\\uFE34\"], [\"\\uFE4D\", \"\\uFE4F\"], \"\\uFF3F\"], false, false),\r\n      peg$c138 = /^[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/,\r\n      peg$c139 = peg$classExpectation([\" \", \"\\xA0\", \"\\u1680\", [\"\\u2000\", \"\\u200A\"], \"\\u202F\", \"\\u205F\", \"\\u3000\"], false, false),\r\n      peg$c140 = \"break\",\r\n      peg$c141 = peg$literalExpectation(\"break\", false),\r\n      peg$c142 = \"case\",\r\n      peg$c143 = peg$literalExpectation(\"case\", false),\r\n      peg$c144 = \"catch\",\r\n      peg$c145 = peg$literalExpectation(\"catch\", false),\r\n      peg$c146 = \"Molde\",\r\n      peg$c147 = peg$literalExpectation(\"Molde\", false),\r\n      peg$c148 = \"const\",\r\n      peg$c149 = peg$literalExpectation(\"const\", false),\r\n      peg$c150 = \"continue\",\r\n      peg$c151 = peg$literalExpectation(\"continue\", false),\r\n      peg$c152 = \"debugger\",\r\n      peg$c153 = peg$literalExpectation(\"debugger\", false),\r\n      peg$c154 = \"default\",\r\n      peg$c155 = peg$literalExpectation(\"default\", false),\r\n      peg$c156 = \"delete\",\r\n      peg$c157 = peg$literalExpectation(\"delete\", false),\r\n      peg$c158 = \"Hacer\",\r\n      peg$c159 = peg$literalExpectation(\"Hacer\", false),\r\n      peg$c160 = \"Si_no\",\r\n      peg$c161 = peg$literalExpectation(\"Si_no\", false),\r\n      peg$c162 = \"enum\",\r\n      peg$c163 = peg$literalExpectation(\"enum\", false),\r\n      peg$c164 = \"export\",\r\n      peg$c165 = peg$literalExpectation(\"export\", false),\r\n      peg$c166 = \"extends\",\r\n      peg$c167 = peg$literalExpectation(\"extends\", false),\r\n      peg$c168 = \"Falso\",\r\n      peg$c169 = peg$literalExpectation(\"Falso\", false),\r\n      peg$c170 = \"finally\",\r\n      peg$c171 = peg$literalExpectation(\"finally\", false),\r\n      peg$c172 = \"Repetir\",\r\n      peg$c173 = peg$literalExpectation(\"Repetir\", false),\r\n      peg$c174 = \"Metodo\",\r\n      peg$c175 = peg$literalExpectation(\"Metodo\", false),\r\n      peg$c176 = \"get\",\r\n      peg$c177 = peg$literalExpectation(\"get\", false),\r\n      peg$c178 = \"Valida\",\r\n      peg$c179 = peg$literalExpectation(\"Valida\", false),\r\n      peg$c180 = \"import\",\r\n      peg$c181 = peg$literalExpectation(\"import\", false),\r\n      peg$c182 = \"instanceof\",\r\n      peg$c183 = peg$literalExpectation(\"instanceof\", false),\r\n      peg$c184 = \"in\",\r\n      peg$c185 = peg$literalExpectation(\"in\", false),\r\n      peg$c186 = \"new\",\r\n      peg$c187 = peg$literalExpectation(\"new\", false),\r\n      peg$c188 = \"null\",\r\n      peg$c189 = peg$literalExpectation(\"null\", false),\r\n      peg$c190 = \"return\",\r\n      peg$c191 = peg$literalExpectation(\"return\", false),\r\n      peg$c192 = \"set\",\r\n      peg$c193 = peg$literalExpectation(\"set\", false),\r\n      peg$c194 = \"super\",\r\n      peg$c195 = peg$literalExpectation(\"super\", false),\r\n      peg$c196 = \"switch\",\r\n      peg$c197 = peg$literalExpectation(\"switch\", false),\r\n      peg$c198 = \"this\",\r\n      peg$c199 = peg$literalExpectation(\"this\", false),\r\n      peg$c200 = \"throw\",\r\n      peg$c201 = peg$literalExpectation(\"throw\", false),\r\n      peg$c202 = \"Verdadero\",\r\n      peg$c203 = peg$literalExpectation(\"Verdadero\", false),\r\n      peg$c204 = \"try\",\r\n      peg$c205 = peg$literalExpectation(\"try\", false),\r\n      peg$c206 = \"typeof\",\r\n      peg$c207 = peg$literalExpectation(\"typeof\", false),\r\n      peg$c208 = \"init\",\r\n      peg$c209 = peg$literalExpectation(\"init\", false),\r\n      peg$c210 = \"void\",\r\n      peg$c211 = peg$literalExpectation(\"void\", false),\r\n      peg$c212 = \"Mientras_que\",\r\n      peg$c213 = peg$literalExpectation(\"Mientras_que\", false),\r\n      peg$c214 = \"with\",\r\n      peg$c215 = peg$literalExpectation(\"with\", false),\r\n      peg$c216 = \";\",\r\n      peg$c217 = peg$literalExpectation(\";\", false),\r\n      peg$c218 = \"}\",\r\n      peg$c219 = peg$literalExpectation(\"}\", false),\r\n      peg$c220 = function() { return { type: \"ThisExpression\" }; },\r\n      peg$c221 = \"(\",\r\n      peg$c222 = peg$literalExpectation(\"(\", false),\r\n      peg$c223 = \")\",\r\n      peg$c224 = peg$literalExpectation(\")\", false),\r\n      peg$c225 = function(expression) { return expression; },\r\n      peg$c226 = function(elision) {\r\n            return {\r\n              type: \"ArrayExpression\",\r\n              elements: optionalList(extractOptional(elision, 0))\r\n            };\r\n          },\r\n      peg$c227 = function(elements) {\r\n            return {\r\n              type: \"ArrayExpression\",\r\n              elements: elements\r\n            };\r\n          },\r\n      peg$c228 = \",\",\r\n      peg$c229 = peg$literalExpectation(\",\", false),\r\n      peg$c230 = function(elements, elision) {\r\n            return {\r\n              type: \"ArrayExpression\",\r\n              elements: elements.concat(optionalList(extractOptional(elision, 0)))\r\n            };\r\n          },\r\n      peg$c231 = function(elision, element) {\r\n              return optionalList(extractOptional(elision, 0)).concat(element);\r\n            },\r\n      peg$c232 = function(head, elision, element) {\r\n              return optionalList(extractOptional(elision, 0)).concat(element);\r\n            },\r\n      peg$c233 = function(head, tail) { return Array.prototype.concat.apply(head, tail); },\r\n      peg$c234 = function(commas) { return filledArray(commas.length + 1, null); },\r\n      peg$c235 = \"{\",\r\n      peg$c236 = peg$literalExpectation(\"{\", false),\r\n      peg$c237 = function() { return { type: \"ObjectExpression\", properties: [] }; },\r\n      peg$c238 = function(properties) {\r\n             return { type: \"ObjectExpression\", properties: properties };\r\n           },\r\n      peg$c239 = function(head, tail) {\r\n            return buildList(head, tail, 3);\r\n          },\r\n      peg$c240 = \":\",\r\n      peg$c241 = peg$literalExpectation(\":\", false),\r\n      peg$c242 = function(key, value) {\r\n            return { type: \"Property\", key: key, value: value, kind: \"init\" };\r\n          },\r\n      peg$c243 = function(key, body) {\r\n            return {\r\n              type: \"Property\",\r\n              key: key,\r\n              value: {\r\n                type: \"FunctionExpression\",\r\n                id: null,\r\n                params: [],\r\n                body: body\r\n              },\r\n              kind: \"get\"\r\n            };\r\n          },\r\n      peg$c244 = function(key, params, body) {\r\n            return {\r\n              type: \"Property\",\r\n              key: key,\r\n              value: {\r\n                type: \"FunctionExpression\",\r\n                id: null,\r\n                params: params,\r\n                body: body\r\n              },\r\n              kind: \"set\"\r\n            };\r\n          },\r\n      peg$c245 = function(id) { return [id]; },\r\n      peg$c246 = function(callee, args) {\r\n                return { type: \"NewExpression\", callee: callee, arguments: args };\r\n              },\r\n      peg$c247 = function(head, property) {\r\n                return { property: property, computed: true };\r\n              },\r\n      peg$c248 = function(head, property) {\r\n                return { property: property, computed: false };\r\n              },\r\n      peg$c249 = function(head, tail) {\r\n            return tail.reduce(function(result, element) {\r\n              return {\r\n                type: \"MemberExpression\",\r\n                object: result,\r\n                property: element.property,\r\n                computed: element.computed\r\n              };\r\n            }, head);\r\n          },\r\n      peg$c250 = function(callee) {\r\n            return { type: \"NewExpression\", callee: callee, arguments: [] };\r\n          },\r\n      peg$c251 = function(callee, args) {\r\n              return { type: \"CallExpression\", callee: callee, arguments: args };\r\n            },\r\n      peg$c252 = function(head, args) {\r\n                return { type: \"CallExpression\", arguments: args };\r\n              },\r\n      peg$c253 = function(head, property) {\r\n                return {\r\n                  type: \"MemberExpression\",\r\n                  property: property,\r\n                  computed: true\r\n                };\r\n              },\r\n      peg$c254 = function(head, property) {\r\n                return {\r\n                  type: \"MemberExpression\",\r\n                  property: property,\r\n                  computed: false\r\n                };\r\n              },\r\n      peg$c255 = function(head, tail) {\r\n            return tail.reduce(function(result, element) {\r\n              element[TYPES_TO_PROPERTY_NAMES[element.type]] = result;\r\n\r\n              return element;\r\n            }, head);\r\n          },\r\n      peg$c256 = function(args) {\r\n            return optionalList(extractOptional(args, 0));\r\n          },\r\n      peg$c257 = function(argument, operator) {\r\n            return {\r\n              type: \"UpdateExpression\",\r\n              operator: operator,\r\n              argument: argument,\r\n              prefix: false\r\n            };\r\n          },\r\n      peg$c258 = \"++\",\r\n      peg$c259 = peg$literalExpectation(\"++\", false),\r\n      peg$c260 = \"--\",\r\n      peg$c261 = peg$literalExpectation(\"--\", false),\r\n      peg$c262 = function(operator, argument) {\r\n            var type = (operator === \"++\" || operator === \"--\")\r\n              ? \"UpdateExpression\"\r\n              : \"UnaryExpression\";\r\n\r\n            return {\r\n              type: type,\r\n              operator: operator,\r\n              argument: argument,\r\n              prefix: true\r\n            };\r\n          },\r\n      peg$c263 = \"+\",\r\n      peg$c264 = peg$literalExpectation(\"+\", false),\r\n      peg$c265 = \"=\",\r\n      peg$c266 = peg$literalExpectation(\"=\", false),\r\n      peg$c267 = \"-\",\r\n      peg$c268 = peg$literalExpectation(\"-\", false),\r\n      peg$c269 = \"~\",\r\n      peg$c270 = peg$literalExpectation(\"~\", false),\r\n      peg$c271 = \"!\",\r\n      peg$c272 = peg$literalExpectation(\"!\", false),\r\n      peg$c273 = function(head, tail) { return buildBinaryExpression(head, tail); },\r\n      peg$c274 = \"*\",\r\n      peg$c275 = peg$literalExpectation(\"*\", false),\r\n      peg$c276 = \"%\",\r\n      peg$c277 = peg$literalExpectation(\"%\", false),\r\n      peg$c278 = /^[+=]/,\r\n      peg$c279 = peg$classExpectation([\"+\", \"=\"], false, false),\r\n      peg$c280 = /^[\\-=]/,\r\n      peg$c281 = peg$classExpectation([\"-\", \"=\"], false, false),\r\n      peg$c282 = \"<<\",\r\n      peg$c283 = peg$literalExpectation(\"<<\", false),\r\n      peg$c284 = \">>>\",\r\n      peg$c285 = peg$literalExpectation(\">>>\", false),\r\n      peg$c286 = \">>\",\r\n      peg$c287 = peg$literalExpectation(\">>\", false),\r\n      peg$c288 = \"<=\",\r\n      peg$c289 = peg$literalExpectation(\"<=\", false),\r\n      peg$c290 = \">=\",\r\n      peg$c291 = peg$literalExpectation(\">=\", false),\r\n      peg$c292 = \"<\",\r\n      peg$c293 = peg$literalExpectation(\"<\", false),\r\n      peg$c294 = \">\",\r\n      peg$c295 = peg$literalExpectation(\">\", false),\r\n      peg$c296 = \"::=\",\r\n      peg$c297 = peg$literalExpectation(\"::=\", false),\r\n      peg$c298 = \"==!\",\r\n      peg$c299 = peg$literalExpectation(\"==!\", false),\r\n      peg$c300 = \"&\",\r\n      peg$c301 = peg$literalExpectation(\"&\", false),\r\n      peg$c302 = /^[&=]/,\r\n      peg$c303 = peg$classExpectation([\"&\", \"=\"], false, false),\r\n      peg$c304 = \"^\",\r\n      peg$c305 = peg$literalExpectation(\"^\", false),\r\n      peg$c306 = \"|\",\r\n      peg$c307 = peg$literalExpectation(\"|\", false),\r\n      peg$c308 = /^[|=]/,\r\n      peg$c309 = peg$classExpectation([\"|\", \"=\"], false, false),\r\n      peg$c310 = function(head, tail) { return buildLogicalExpression(head, tail); },\r\n      peg$c311 = \"&&\",\r\n      peg$c312 = peg$literalExpectation(\"&&\", false),\r\n      peg$c313 = \"||\",\r\n      peg$c314 = peg$literalExpectation(\"||\", false),\r\n      peg$c315 = \"?\",\r\n      peg$c316 = peg$literalExpectation(\"?\", false),\r\n      peg$c317 = function(test, consequent, alternate) {\r\n            return {\r\n              type: \"ConditionalExpression\",\r\n              test: test,\r\n              consequent: consequent,\r\n              alternate: alternate\r\n            };\r\n          },\r\n      peg$c318 = \"::\",\r\n      peg$c319 = peg$literalExpectation(\"::\", false),\r\n      peg$c320 = function(left, right) {\r\n            return {\r\n              type: \"AssignmentExpression\",\r\n              operator: \"::\",\r\n              left: left,\r\n              right: right\r\n            };\r\n          },\r\n      peg$c321 = function(left, operator, right) {\r\n            return {\r\n              type: \"AssignmentExpression\",\r\n              operator: operator,\r\n              left: left,\r\n              right: right\r\n            };\r\n          },\r\n      peg$c322 = \"*=\",\r\n      peg$c323 = peg$literalExpectation(\"*=\", false),\r\n      peg$c324 = \"/=\",\r\n      peg$c325 = peg$literalExpectation(\"/=\", false),\r\n      peg$c326 = \"%=\",\r\n      peg$c327 = peg$literalExpectation(\"%=\", false),\r\n      peg$c328 = \"+=\",\r\n      peg$c329 = peg$literalExpectation(\"+=\", false),\r\n      peg$c330 = \"-=\",\r\n      peg$c331 = peg$literalExpectation(\"-=\", false),\r\n      peg$c332 = \"<<=\",\r\n      peg$c333 = peg$literalExpectation(\"<<=\", false),\r\n      peg$c334 = \">>=\",\r\n      peg$c335 = peg$literalExpectation(\">>=\", false),\r\n      peg$c336 = \">>>=\",\r\n      peg$c337 = peg$literalExpectation(\">>>=\", false),\r\n      peg$c338 = \"&=\",\r\n      peg$c339 = peg$literalExpectation(\"&=\", false),\r\n      peg$c340 = \"^=\",\r\n      peg$c341 = peg$literalExpectation(\"^=\", false),\r\n      peg$c342 = \"|=\",\r\n      peg$c343 = peg$literalExpectation(\"|=\", false),\r\n      peg$c344 = function(head, tail) {\r\n            return tail.length > 0\r\n              ? { type: \"SequenceExpression\", expressions: buildList(head, tail, 3) }\r\n              : head;\r\n          },\r\n      peg$c345 = function(body) {\r\n            return {\r\n              type: \"BlockStatement\",\r\n              body: optionalList(extractOptional(body, 0))\r\n            };\r\n          },\r\n      peg$c346 = function(head, tail) { return buildList(head, tail, 1); },\r\n      peg$c347 = function(declarations) {\r\n            return {\r\n              type: \"VariableDeclaration\",\r\n              declarations: declarations,\r\n              kind: \"var\"\r\n            };\r\n          },\r\n      peg$c348 = function(id, init) {\r\n            return {\r\n              type: \"VariableDeclarator\",\r\n              id: id,\r\n              init: extractOptional(init, 1)\r\n            };\r\n          },\r\n      peg$c349 = function() { return { type: \"EmptyStatement\" }; },\r\n      peg$c350 = function(expression) {\r\n            return {\r\n              type: \"ExpressionStatement\",\r\n              expression: expression\r\n            };\r\n          },\r\n      peg$c351 = function(test, consequent, alternate) {\r\n            return {\r\n              type: \"IfStatement\",\r\n              test: test,\r\n              consequent: consequent,\r\n              alternate: alternate\r\n            };\r\n          },\r\n      peg$c352 = function(test, consequent) {\r\n            return {\r\n              type: \"IfStatement\",\r\n              test: test,\r\n              consequent: consequent,\r\n              alternate: null\r\n            };\r\n          },\r\n      peg$c353 = function(body, test) { return { type: \"DoWhileStatement\", body: body, test: test }; },\r\n      peg$c354 = function(test, body) { return { type: \"WhileStatement\", test: test, body: body }; },\r\n      peg$c355 = function(init, test, update, body) {\r\n            return {\r\n              type: \"ForStatement\",\r\n              init: extractOptional(init, 0),\r\n              test: extractOptional(test, 0),\r\n              update: extractOptional(update, 0),\r\n              body: body\r\n            };\r\n          },\r\n      peg$c356 = function(declarations, test, update, body) {\r\n            return {\r\n              type: \"ForStatement\",\r\n              init: {\r\n                type: \"VariableDeclaration\",\r\n                declarations: declarations,\r\n                kind: \"var\"\r\n              },\r\n              test: extractOptional(test, 0),\r\n              update: extractOptional(update, 0),\r\n              body: body\r\n            };\r\n          },\r\n      peg$c357 = function(left, right, body) {\r\n            return {\r\n              type: \"ForInStatement\",\r\n              left: left,\r\n              right: right,\r\n              body: body\r\n            };\r\n          },\r\n      peg$c358 = function(declarations, right, body) {\r\n            return {\r\n              type: \"ForInStatement\",\r\n              left: {\r\n                type: \"VariableDeclaration\",\r\n                declarations: declarations,\r\n                kind: \"var\"\r\n              },\r\n              right: right,\r\n              body: body\r\n            };\r\n          },\r\n      peg$c359 = function() {\r\n            return { type: \"ContinueStatement\", label: null };\r\n          },\r\n      peg$c360 = function(label) {\r\n            return { type: \"ContinueStatement\", label: label };\r\n          },\r\n      peg$c361 = function() {\r\n            return { type: \"BreakStatement\", label: null };\r\n          },\r\n      peg$c362 = function(label) {\r\n            return { type: \"BreakStatement\", label: label };\r\n          },\r\n      peg$c363 = function() {\r\n            return { type: \"ReturnStatement\", argument: null };\r\n          },\r\n      peg$c364 = function(argument) {\r\n            return { type: \"ReturnStatement\", argument: argument };\r\n          },\r\n      peg$c365 = function(object, body) { return { type: \"WithStatement\", object: object, body: body }; },\r\n      peg$c366 = function(discriminant, cases) {\r\n            return {\r\n              type: \"SwitchStatement\",\r\n              discriminant: discriminant,\r\n              cases: cases\r\n            };\r\n          },\r\n      peg$c367 = function(clauses) {\r\n            return optionalList(extractOptional(clauses, 0));\r\n          },\r\n      peg$c368 = function(before, default_, after) {\r\n            return optionalList(extractOptional(before, 0))\r\n              .concat(default_)\r\n              .concat(optionalList(extractOptional(after, 0)));\r\n          },\r\n      peg$c369 = function(test, consequent) {\r\n            return {\r\n              type: \"SwitchCase\",\r\n              test: test,\r\n              consequent: optionalList(extractOptional(consequent, 1))\r\n            };\r\n          },\r\n      peg$c370 = function(consequent) {\r\n            return {\r\n              type: \"SwitchCase\",\r\n              test: null,\r\n              consequent: optionalList(extractOptional(consequent, 1))\r\n            };\r\n          },\r\n      peg$c371 = function(label, body) {\r\n            return { type: \"LabeledStatement\", label: label, body: body };\r\n          },\r\n      peg$c372 = function(argument) {\r\n            return { type: \"ThrowStatement\", argument: argument };\r\n          },\r\n      peg$c373 = function(block, handler, finalizer) {\r\n            return {\r\n              type: \"TryStatement\",\r\n              block: block,\r\n              handler: handler,\r\n              finalizer: finalizer\r\n            };\r\n          },\r\n      peg$c374 = function(block, handler) {\r\n            return {\r\n              type: \"TryStatement\",\r\n              block: block,\r\n              handler: handler,\r\n              finalizer: null\r\n            };\r\n          },\r\n      peg$c375 = function(block, finalizer) {\r\n            return {\r\n              type: \"TryStatement\",\r\n              block: block,\r\n              handler: null,\r\n              finalizer: finalizer\r\n            };\r\n          },\r\n      peg$c376 = function(param, body) {\r\n            return {\r\n              type: \"CatchClause\",\r\n              param: param,\r\n              body: body\r\n            };\r\n          },\r\n      peg$c377 = function(block) { return block; },\r\n      peg$c378 = function() { return { type: \"DebuggerStatement\" }; },\r\n      peg$c379 = function(id, params, body) {\r\n            return {\r\n              type: \"FunctionDeclaration\",\r\n              id: id,\r\n              params: optionalList(extractOptional(params, 0)),\r\n              body: body\r\n            };\r\n          },\r\n      peg$c380 = function(id, params, body) {\r\n            return {\r\n              type: \"FunctionExpression\",\r\n              id: extractOptional(id, 0),\r\n              params: optionalList(extractOptional(params, 0)),\r\n              body: body\r\n            };\r\n          },\r\n      peg$c381 = function(body) {\r\n            return {\r\n              type: \"BlockStatement\",\r\n              body: optionalList(body)\r\n            };\r\n          },\r\n      peg$c382 = function(body) {\r\n            return {\r\n              type: \"Program\",\r\n              body: optionalList(body)\r\n            };\r\n          },\r\n      peg$c383 = function(head, tail) {\r\n            return buildList(head, tail, 1);\r\n          },\r\n\r\n      peg$currPos          = 0,\r\n      peg$savedPos         = 0,\r\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\r\n      peg$maxFailPos       = 0,\r\n      peg$maxFailExpected  = [],\r\n      peg$silentFails      = 0,\r\n\r\n      peg$result;\r\n\r\n  if (\"startRule\" in options) {\r\n    if (!(options.startRule in peg$startRuleFunctions)) {\r\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\r\n    }\r\n\r\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\r\n  }\r\n\r\n  function text() {\r\n    return input.substring(peg$savedPos, peg$currPos);\r\n  }\r\n\r\n  function location() {\r\n    return peg$computeLocation(peg$savedPos, peg$currPos);\r\n  }\r\n\r\n  function expected(description, location) {\r\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\r\n\r\n    throw peg$buildStructuredError(\r\n      [peg$otherExpectation(description)],\r\n      input.substring(peg$savedPos, peg$currPos),\r\n      location\r\n    );\r\n  }\r\n\r\n  function error(message, location) {\r\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\r\n\r\n    throw peg$buildSimpleError(message, location);\r\n  }\r\n\r\n  function peg$literalExpectation(text, ignoreCase) {\r\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\r\n  }\r\n\r\n  function peg$classExpectation(parts, inverted, ignoreCase) {\r\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\r\n  }\r\n\r\n  function peg$anyExpectation() {\r\n    return { type: \"any\" };\r\n  }\r\n\r\n  function peg$endExpectation() {\r\n    return { type: \"end\" };\r\n  }\r\n\r\n  function peg$otherExpectation(description) {\r\n    return { type: \"other\", description: description };\r\n  }\r\n\r\n  function peg$computePosDetails(pos) {\r\n    var details = peg$posDetailsCache[pos], p;\r\n\r\n    if (details) {\r\n      return details;\r\n    } else {\r\n      p = pos - 1;\r\n      while (!peg$posDetailsCache[p]) {\r\n        p--;\r\n      }\r\n\r\n      details = peg$posDetailsCache[p];\r\n      details = {\r\n        line:   details.line,\r\n        column: details.column\r\n      };\r\n\r\n      while (p < pos) {\r\n        if (input.charCodeAt(p) === 10) {\r\n          details.line++;\r\n          details.column = 1;\r\n        } else {\r\n          details.column++;\r\n        }\r\n\r\n        p++;\r\n      }\r\n\r\n      peg$posDetailsCache[pos] = details;\r\n      return details;\r\n    }\r\n  }\r\n\r\n  function peg$computeLocation(startPos, endPos) {\r\n    var startPosDetails = peg$computePosDetails(startPos),\r\n        endPosDetails   = peg$computePosDetails(endPos);\r\n\r\n    return {\r\n      start: {\r\n        offset: startPos,\r\n        line:   startPosDetails.line,\r\n        column: startPosDetails.column\r\n      },\r\n      end: {\r\n        offset: endPos,\r\n        line:   endPosDetails.line,\r\n        column: endPosDetails.column\r\n      }\r\n    };\r\n  }\r\n\r\n  function peg$fail(expected) {\r\n    if (peg$currPos < peg$maxFailPos) { return; }\r\n\r\n    if (peg$currPos > peg$maxFailPos) {\r\n      peg$maxFailPos = peg$currPos;\r\n      peg$maxFailExpected = [];\r\n    }\r\n\r\n    peg$maxFailExpected.push(expected);\r\n  }\r\n\r\n  function peg$buildSimpleError(message, location) {\r\n    return new peg$SyntaxError(message, null, null, location);\r\n  }\r\n\r\n  function peg$buildStructuredError(expected, found, location) {\r\n    return new peg$SyntaxError(\r\n      peg$SyntaxError.buildMessage(expected, found),\r\n      expected,\r\n      found,\r\n      location\r\n    );\r\n  }\r\n\r\n  function peg$parseStart() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parse__();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseProgram();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parse__();\r\n        if (s3 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c0(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSourceCharacter() {\r\n    var s0;\r\n\r\n    if (input.length > peg$currPos) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c1); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseWhiteSpace() {\r\n    var s0, s1;\r\n\r\n    peg$silentFails++;\r\n    if (input.charCodeAt(peg$currPos) === 9) {\r\n      s0 = peg$c3;\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      if (input.charCodeAt(peg$currPos) === 11) {\r\n        s0 = peg$c5;\r\n        peg$currPos++;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 12) {\r\n          s0 = peg$c7;\r\n          peg$currPos++;\r\n        } else {\r\n          s0 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 32) {\r\n            s0 = peg$c9;\r\n            peg$currPos++;\r\n          } else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 160) {\r\n              s0 = peg$c11;\r\n              peg$currPos++;\r\n            } else {\r\n              s0 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c12); }\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 65279) {\r\n                s0 = peg$c13;\r\n                peg$currPos++;\r\n              } else {\r\n                s0 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\r\n              }\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$parseZs();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c2); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLineTerminator() {\r\n    var s0;\r\n\r\n    if (peg$c15.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c16); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLineTerminatorSequence() {\r\n    var s0, s1;\r\n\r\n    peg$silentFails++;\r\n    if (input.charCodeAt(peg$currPos) === 10) {\r\n      s0 = peg$c18;\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      if (input.substr(peg$currPos, 2) === peg$c20) {\r\n        s0 = peg$c20;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 13) {\r\n          s0 = peg$c22;\r\n          peg$currPos++;\r\n        } else {\r\n          s0 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 8232) {\r\n            s0 = peg$c24;\r\n            peg$currPos++;\r\n          } else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c25); }\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 8233) {\r\n              s0 = peg$c26;\r\n              peg$currPos++;\r\n            } else {\r\n              s0 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c27); }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseComment() {\r\n    var s0, s1;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$parseMultiLineComment();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseSingleLineComment();\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseMultiLineComment() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 2) === peg$c29) {\r\n      s1 = peg$c29;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c30); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (input.substr(peg$currPos, 2) === peg$c31) {\r\n        s5 = peg$c31;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s5 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n      }\r\n      peg$silentFails--;\r\n      if (s5 === peg$FAILED) {\r\n        s4 = void 0;\r\n      } else {\r\n        peg$currPos = s4;\r\n        s4 = peg$FAILED;\r\n      }\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseSourceCharacter();\r\n        if (s5 !== peg$FAILED) {\r\n          s4 = [s4, s5];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$currPos;\r\n        peg$silentFails++;\r\n        if (input.substr(peg$currPos, 2) === peg$c31) {\r\n          s5 = peg$c31;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n        }\r\n        peg$silentFails--;\r\n        if (s5 === peg$FAILED) {\r\n          s4 = void 0;\r\n        } else {\r\n          peg$currPos = s4;\r\n          s4 = peg$FAILED;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseSourceCharacter();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.substr(peg$currPos, 2) === peg$c31) {\r\n          s3 = peg$c31;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s1 = [s1, s2, s3];\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseMultiLineCommentNoLineTerminator() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 2) === peg$c29) {\r\n      s1 = peg$c29;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c30); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (input.substr(peg$currPos, 2) === peg$c31) {\r\n        s5 = peg$c31;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s5 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n      }\r\n      if (s5 === peg$FAILED) {\r\n        s5 = peg$parseLineTerminator();\r\n      }\r\n      peg$silentFails--;\r\n      if (s5 === peg$FAILED) {\r\n        s4 = void 0;\r\n      } else {\r\n        peg$currPos = s4;\r\n        s4 = peg$FAILED;\r\n      }\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseSourceCharacter();\r\n        if (s5 !== peg$FAILED) {\r\n          s4 = [s4, s5];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$currPos;\r\n        peg$silentFails++;\r\n        if (input.substr(peg$currPos, 2) === peg$c31) {\r\n          s5 = peg$c31;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n        }\r\n        if (s5 === peg$FAILED) {\r\n          s5 = peg$parseLineTerminator();\r\n        }\r\n        peg$silentFails--;\r\n        if (s5 === peg$FAILED) {\r\n          s4 = void 0;\r\n        } else {\r\n          peg$currPos = s4;\r\n          s4 = peg$FAILED;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseSourceCharacter();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.substr(peg$currPos, 2) === peg$c31) {\r\n          s3 = peg$c31;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s1 = [s1, s2, s3];\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSingleLineComment() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 2) === peg$c33) {\r\n      s1 = peg$c33;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c34); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$currPos;\r\n      peg$silentFails++;\r\n      s5 = peg$parseLineTerminator();\r\n      peg$silentFails--;\r\n      if (s5 === peg$FAILED) {\r\n        s4 = void 0;\r\n      } else {\r\n        peg$currPos = s4;\r\n        s4 = peg$FAILED;\r\n      }\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseSourceCharacter();\r\n        if (s5 !== peg$FAILED) {\r\n          s4 = [s4, s5];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$currPos;\r\n        peg$silentFails++;\r\n        s5 = peg$parseLineTerminator();\r\n        peg$silentFails--;\r\n        if (s5 === peg$FAILED) {\r\n          s4 = void 0;\r\n        } else {\r\n          peg$currPos = s4;\r\n          s4 = peg$FAILED;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseSourceCharacter();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseIdentifier() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    peg$silentFails++;\r\n    s2 = peg$parseReservedWord();\r\n    peg$silentFails--;\r\n    if (s2 === peg$FAILED) {\r\n      s1 = void 0;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseIdentifierName();\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c35(s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseIdentifierName() {\r\n    var s0, s1, s2, s3;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseIdentifierStart();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$parseIdentifierPart();\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$parseIdentifierPart();\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c37(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseIdentifierStart() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$parseUnicodeLetter();\r\n    if (s0 === peg$FAILED) {\r\n      if (input.charCodeAt(peg$currPos) === 36) {\r\n        s0 = peg$c38;\r\n        peg$currPos++;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 95) {\r\n          s0 = peg$c40;\r\n          peg$currPos++;\r\n        } else {\r\n          s0 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 92) {\r\n            s1 = peg$c42;\r\n            peg$currPos++;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n          }\r\n          if (s1 !== peg$FAILED) {\r\n            s2 = peg$parseUnicodeEscapeSequence();\r\n            if (s2 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c44(s2);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseIdentifierPart() {\r\n    var s0;\r\n\r\n    s0 = peg$parseIdentifierStart();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseUnicodeCombiningMark();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseNd();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parsePc();\r\n          if (s0 === peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 8204) {\r\n              s0 = peg$c45;\r\n              peg$currPos++;\r\n            } else {\r\n              s0 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c46); }\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 8205) {\r\n                s0 = peg$c47;\r\n                peg$currPos++;\r\n              } else {\r\n                s0 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c48); }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseUnicodeLetter() {\r\n    var s0;\r\n\r\n    s0 = peg$parseLu();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseLl();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseLt();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseLm();\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parseLo();\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$parseNl();\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseUnicodeCombiningMark() {\r\n    var s0;\r\n\r\n    s0 = peg$parseMn();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseMc();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseReservedWord() {\r\n    var s0;\r\n\r\n    s0 = peg$parseKeyword();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseFutureReservedWord();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseNullLiteral();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseBooleanLiteral();\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseKeyword() {\r\n    var s0;\r\n\r\n    s0 = peg$parseBreakToken();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseCaseToken();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseCatchToken();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseContinueToken();\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parseDebuggerToken();\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$parseDefaultToken();\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$parseDeleteToken();\r\n                if (s0 === peg$FAILED) {\r\n                  s0 = peg$parseDoToken();\r\n                  if (s0 === peg$FAILED) {\r\n                    s0 = peg$parseElseToken();\r\n                    if (s0 === peg$FAILED) {\r\n                      s0 = peg$parseFinallyToken();\r\n                      if (s0 === peg$FAILED) {\r\n                        s0 = peg$parseForToken();\r\n                        if (s0 === peg$FAILED) {\r\n                          s0 = peg$parseFunctionToken();\r\n                          if (s0 === peg$FAILED) {\r\n                            s0 = peg$parseIfToken();\r\n                            if (s0 === peg$FAILED) {\r\n                              s0 = peg$parseInstanceofToken();\r\n                              if (s0 === peg$FAILED) {\r\n                                s0 = peg$parseInToken();\r\n                                if (s0 === peg$FAILED) {\r\n                                  s0 = peg$parseNewToken();\r\n                                  if (s0 === peg$FAILED) {\r\n                                    s0 = peg$parseReturnToken();\r\n                                    if (s0 === peg$FAILED) {\r\n                                      s0 = peg$parseSwitchToken();\r\n                                      if (s0 === peg$FAILED) {\r\n                                        s0 = peg$parseThisToken();\r\n                                        if (s0 === peg$FAILED) {\r\n                                          s0 = peg$parseThrowToken();\r\n                                          if (s0 === peg$FAILED) {\r\n                                            s0 = peg$parseTryToken();\r\n                                            if (s0 === peg$FAILED) {\r\n                                              s0 = peg$parseTypeofToken();\r\n                                              if (s0 === peg$FAILED) {\r\n                                                s0 = peg$parseVarToken();\r\n                                                if (s0 === peg$FAILED) {\r\n                                                  s0 = peg$parseVoidToken();\r\n                                                  if (s0 === peg$FAILED) {\r\n                                                    s0 = peg$parseWhileToken();\r\n                                                    if (s0 === peg$FAILED) {\r\n                                                      s0 = peg$parseWithToken();\r\n                                                    }\r\n                                                  }\r\n                                                }\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFutureReservedWord() {\r\n    var s0;\r\n\r\n    s0 = peg$parseClassToken();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseConstToken();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseEnumToken();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseExportToken();\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parseExtendsToken();\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$parseImportToken();\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$parseSuperToken();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLiteral() {\r\n    var s0;\r\n\r\n    s0 = peg$parseNullLiteral();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseBooleanLiteral();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseNumericLiteral();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseStringLiteral();\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parseRegularExpressionLiteral();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseNullLiteral() {\r\n    var s0, s1;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseNullToken();\r\n    if (s1 !== peg$FAILED) {\r\n      peg$savedPos = s0;\r\n      s1 = peg$c49();\r\n    }\r\n    s0 = s1;\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBooleanLiteral() {\r\n    var s0, s1;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseTrueToken();\r\n    if (s1 !== peg$FAILED) {\r\n      peg$savedPos = s0;\r\n      s1 = peg$c50();\r\n    }\r\n    s0 = s1;\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseFalseToken();\r\n      if (s1 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c51();\r\n      }\r\n      s0 = s1;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseNumericLiteral() {\r\n    var s0, s1, s2, s3;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseHexIntegerLiteral();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierStart();\r\n      if (s3 === peg$FAILED) {\r\n        s3 = peg$parseDecimalDigit();\r\n      }\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c53(s1);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseDecimalLiteral();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        peg$silentFails++;\r\n        s3 = peg$parseIdentifierStart();\r\n        if (s3 === peg$FAILED) {\r\n          s3 = peg$parseDecimalDigit();\r\n        }\r\n        peg$silentFails--;\r\n        if (s3 === peg$FAILED) {\r\n          s2 = void 0;\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c53(s1);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c52); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDecimalLiteral() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseDecimalIntegerLiteral();\r\n    if (s1 !== peg$FAILED) {\r\n      if (input.charCodeAt(peg$currPos) === 46) {\r\n        s2 = peg$c54;\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c55); }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = [];\r\n        s4 = peg$parseDecimalDigit();\r\n        while (s4 !== peg$FAILED) {\r\n          s3.push(s4);\r\n          s4 = peg$parseDecimalDigit();\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parseExponentPart();\r\n          if (s4 === peg$FAILED) {\r\n            s4 = null;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c56();\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 46) {\r\n        s1 = peg$c54;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c55); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$parseDecimalDigit();\r\n        if (s3 !== peg$FAILED) {\r\n          while (s3 !== peg$FAILED) {\r\n            s2.push(s3);\r\n            s3 = peg$parseDecimalDigit();\r\n          }\r\n        } else {\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseExponentPart();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = null;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c56();\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseDecimalIntegerLiteral();\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parseExponentPart();\r\n          if (s2 === peg$FAILED) {\r\n            s2 = null;\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c56();\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDecimalIntegerLiteral() {\r\n    var s0, s1, s2, s3;\r\n\r\n    if (input.charCodeAt(peg$currPos) === 48) {\r\n      s0 = peg$c57;\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c58); }\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseNonZeroDigit();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$parseDecimalDigit();\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$parseDecimalDigit();\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s1 = [s1, s2];\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDecimalDigit() {\r\n    var s0;\r\n\r\n    if (peg$c59.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c60); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseNonZeroDigit() {\r\n    var s0;\r\n\r\n    if (peg$c61.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseExponentPart() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseExponentIndicator();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseSignedInteger();\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseExponentIndicator() {\r\n    var s0;\r\n\r\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c63) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c64); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSignedInteger() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (peg$c65.test(input.charAt(peg$currPos))) {\r\n      s1 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c66); }\r\n    }\r\n    if (s1 === peg$FAILED) {\r\n      s1 = null;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$parseDecimalDigit();\r\n      if (s3 !== peg$FAILED) {\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$parseDecimalDigit();\r\n        }\r\n      } else {\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseHexIntegerLiteral() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c67) {\r\n      s1 = input.substr(peg$currPos, 2);\r\n      peg$currPos += 2;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c68); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      s3 = [];\r\n      s4 = peg$parseHexDigit();\r\n      if (s4 !== peg$FAILED) {\r\n        while (s4 !== peg$FAILED) {\r\n          s3.push(s4);\r\n          s4 = peg$parseHexDigit();\r\n        }\r\n      } else {\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = input.substring(s2, peg$currPos);\r\n      } else {\r\n        s2 = s3;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c69(s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseHexDigit() {\r\n    var s0;\r\n\r\n    if (peg$c70.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c71); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseStringLiteral() {\r\n    var s0, s1, s2, s3;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 34) {\r\n      s1 = peg$c73;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c74); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$parseDoubleStringCharacter();\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$parseDoubleStringCharacter();\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 34) {\r\n          s3 = peg$c73;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c74); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c75(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 39) {\r\n        s1 = peg$c76;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$parseSingleStringCharacter();\r\n        while (s3 !== peg$FAILED) {\r\n          s2.push(s3);\r\n          s3 = peg$parseSingleStringCharacter();\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 39) {\r\n            s3 = peg$c76;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c77); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c75(s2);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c72); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDoubleStringCharacter() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    peg$silentFails++;\r\n    if (input.charCodeAt(peg$currPos) === 34) {\r\n      s2 = peg$c73;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c74); }\r\n    }\r\n    if (s2 === peg$FAILED) {\r\n      if (input.charCodeAt(peg$currPos) === 92) {\r\n        s2 = peg$c42;\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n      }\r\n      if (s2 === peg$FAILED) {\r\n        s2 = peg$parseLineTerminator();\r\n      }\r\n    }\r\n    peg$silentFails--;\r\n    if (s2 === peg$FAILED) {\r\n      s1 = void 0;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseSourceCharacter();\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c78();\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 92) {\r\n        s1 = peg$c42;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseEscapeSequence();\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c44(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseLineContinuation();\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSingleStringCharacter() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    peg$silentFails++;\r\n    if (input.charCodeAt(peg$currPos) === 39) {\r\n      s2 = peg$c76;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c77); }\r\n    }\r\n    if (s2 === peg$FAILED) {\r\n      if (input.charCodeAt(peg$currPos) === 92) {\r\n        s2 = peg$c42;\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n      }\r\n      if (s2 === peg$FAILED) {\r\n        s2 = peg$parseLineTerminator();\r\n      }\r\n    }\r\n    peg$silentFails--;\r\n    if (s2 === peg$FAILED) {\r\n      s1 = void 0;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseSourceCharacter();\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c78();\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 92) {\r\n        s1 = peg$c42;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseEscapeSequence();\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c44(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseLineContinuation();\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLineContinuation() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 92) {\r\n      s1 = peg$c42;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseLineTerminatorSequence();\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c79();\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseEscapeSequence() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$parseCharacterEscapeSequence();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 48) {\r\n        s1 = peg$c57;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c58); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        peg$silentFails++;\r\n        s3 = peg$parseDecimalDigit();\r\n        peg$silentFails--;\r\n        if (s3 === peg$FAILED) {\r\n          s2 = void 0;\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c80();\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseHexEscapeSequence();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseUnicodeEscapeSequence();\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseCharacterEscapeSequence() {\r\n    var s0;\r\n\r\n    s0 = peg$parseSingleEscapeCharacter();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseNonEscapeCharacter();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSingleEscapeCharacter() {\r\n    var s0, s1;\r\n\r\n    if (input.charCodeAt(peg$currPos) === 39) {\r\n      s0 = peg$c76;\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c77); }\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      if (input.charCodeAt(peg$currPos) === 34) {\r\n        s0 = peg$c73;\r\n        peg$currPos++;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c74); }\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 92) {\r\n          s0 = peg$c42;\r\n          peg$currPos++;\r\n        } else {\r\n          s0 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 98) {\r\n            s1 = peg$c81;\r\n            peg$currPos++;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c82); }\r\n          }\r\n          if (s1 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c83();\r\n          }\r\n          s0 = s1;\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 102) {\r\n              s1 = peg$c84;\r\n              peg$currPos++;\r\n            } else {\r\n              s1 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c85); }\r\n            }\r\n            if (s1 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c86();\r\n            }\r\n            s0 = s1;\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$currPos;\r\n              if (input.charCodeAt(peg$currPos) === 110) {\r\n                s1 = peg$c87;\r\n                peg$currPos++;\r\n              } else {\r\n                s1 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c88); }\r\n              }\r\n              if (s1 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c89();\r\n              }\r\n              s0 = s1;\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$currPos;\r\n                if (input.charCodeAt(peg$currPos) === 114) {\r\n                  s1 = peg$c90;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s1 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c91); }\r\n                }\r\n                if (s1 !== peg$FAILED) {\r\n                  peg$savedPos = s0;\r\n                  s1 = peg$c92();\r\n                }\r\n                s0 = s1;\r\n                if (s0 === peg$FAILED) {\r\n                  s0 = peg$currPos;\r\n                  if (input.charCodeAt(peg$currPos) === 116) {\r\n                    s1 = peg$c93;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s1 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c94); }\r\n                  }\r\n                  if (s1 !== peg$FAILED) {\r\n                    peg$savedPos = s0;\r\n                    s1 = peg$c95();\r\n                  }\r\n                  s0 = s1;\r\n                  if (s0 === peg$FAILED) {\r\n                    s0 = peg$currPos;\r\n                    if (input.charCodeAt(peg$currPos) === 118) {\r\n                      s1 = peg$c96;\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s1 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c97); }\r\n                    }\r\n                    if (s1 !== peg$FAILED) {\r\n                      peg$savedPos = s0;\r\n                      s1 = peg$c98();\r\n                    }\r\n                    s0 = s1;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseNonEscapeCharacter() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    peg$silentFails++;\r\n    s2 = peg$parseEscapeCharacter();\r\n    if (s2 === peg$FAILED) {\r\n      s2 = peg$parseLineTerminator();\r\n    }\r\n    peg$silentFails--;\r\n    if (s2 === peg$FAILED) {\r\n      s1 = void 0;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseSourceCharacter();\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c78();\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseEscapeCharacter() {\r\n    var s0;\r\n\r\n    s0 = peg$parseSingleEscapeCharacter();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseDecimalDigit();\r\n      if (s0 === peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 120) {\r\n          s0 = peg$c99;\r\n          peg$currPos++;\r\n        } else {\r\n          s0 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c100); }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 117) {\r\n            s0 = peg$c101;\r\n            peg$currPos++;\r\n          } else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c102); }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseHexEscapeSequence() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 120) {\r\n      s1 = peg$c99;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c100); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      s3 = peg$currPos;\r\n      s4 = peg$parseHexDigit();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseHexDigit();\r\n        if (s5 !== peg$FAILED) {\r\n          s4 = [s4, s5];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = input.substring(s2, peg$currPos);\r\n      } else {\r\n        s2 = s3;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c103(s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseUnicodeEscapeSequence() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 117) {\r\n      s1 = peg$c101;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c102); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      s3 = peg$currPos;\r\n      s4 = peg$parseHexDigit();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseHexDigit();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parseHexDigit();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseHexDigit();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = input.substring(s2, peg$currPos);\r\n      } else {\r\n        s2 = s3;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c103(s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRegularExpressionLiteral() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 47) {\r\n      s1 = peg$c105;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c106); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      s3 = peg$parseRegularExpressionBody();\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = input.substring(s2, peg$currPos);\r\n      } else {\r\n        s2 = s3;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 47) {\r\n          s3 = peg$c105;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c106); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$currPos;\r\n          s5 = peg$parseRegularExpressionFlags();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = input.substring(s4, peg$currPos);\r\n          } else {\r\n            s4 = s5;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c107(s2, s4);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRegularExpressionBody() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseRegularExpressionFirstChar();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$parseRegularExpressionChar();\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$parseRegularExpressionChar();\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRegularExpressionFirstChar() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    peg$silentFails++;\r\n    if (peg$c108.test(input.charAt(peg$currPos))) {\r\n      s2 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c109); }\r\n    }\r\n    peg$silentFails--;\r\n    if (s2 === peg$FAILED) {\r\n      s1 = void 0;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseRegularExpressionNonTerminator();\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseRegularExpressionBackslashSequence();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseRegularExpressionClass();\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRegularExpressionChar() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    peg$silentFails++;\r\n    if (peg$c110.test(input.charAt(peg$currPos))) {\r\n      s2 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c111); }\r\n    }\r\n    peg$silentFails--;\r\n    if (s2 === peg$FAILED) {\r\n      s1 = void 0;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseRegularExpressionNonTerminator();\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseRegularExpressionBackslashSequence();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseRegularExpressionClass();\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRegularExpressionBackslashSequence() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 92) {\r\n      s1 = peg$c42;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseRegularExpressionNonTerminator();\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRegularExpressionNonTerminator() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    peg$silentFails++;\r\n    s2 = peg$parseLineTerminator();\r\n    peg$silentFails--;\r\n    if (s2 === peg$FAILED) {\r\n      s1 = void 0;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseSourceCharacter();\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRegularExpressionClass() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 91) {\r\n      s1 = peg$c112;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$parseRegularExpressionClassChar();\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$parseRegularExpressionClassChar();\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 93) {\r\n          s3 = peg$c114;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s1 = [s1, s2, s3];\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRegularExpressionClassChar() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    peg$silentFails++;\r\n    if (peg$c116.test(input.charAt(peg$currPos))) {\r\n      s2 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c117); }\r\n    }\r\n    peg$silentFails--;\r\n    if (s2 === peg$FAILED) {\r\n      s1 = void 0;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseRegularExpressionNonTerminator();\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseRegularExpressionBackslashSequence();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRegularExpressionFlags() {\r\n    var s0, s1;\r\n\r\n    s0 = [];\r\n    s1 = peg$parseIdentifierPart();\r\n    while (s1 !== peg$FAILED) {\r\n      s0.push(s1);\r\n      s1 = peg$parseIdentifierPart();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLl() {\r\n    var s0;\r\n\r\n    if (peg$c118.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c119); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLm() {\r\n    var s0;\r\n\r\n    if (peg$c120.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c121); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLo() {\r\n    var s0;\r\n\r\n    if (peg$c122.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c123); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLt() {\r\n    var s0;\r\n\r\n    if (peg$c124.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c125); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLu() {\r\n    var s0;\r\n\r\n    if (peg$c126.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseMc() {\r\n    var s0;\r\n\r\n    if (peg$c128.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseMn() {\r\n    var s0;\r\n\r\n    if (peg$c130.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c131); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseNd() {\r\n    var s0;\r\n\r\n    if (peg$c132.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c133); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseNl() {\r\n    var s0;\r\n\r\n    if (peg$c134.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c135); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsePc() {\r\n    var s0;\r\n\r\n    if (peg$c136.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c137); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseZs() {\r\n    var s0;\r\n\r\n    if (peg$c138.test(input.charAt(peg$currPos))) {\r\n      s0 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c139); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBreakToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c140) {\r\n      s1 = peg$c140;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c141); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseCaseToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 4) === peg$c142) {\r\n      s1 = peg$c142;\r\n      peg$currPos += 4;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c143); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseCatchToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c144) {\r\n      s1 = peg$c144;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseClassToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c146) {\r\n      s1 = peg$c146;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c147); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseConstToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c148) {\r\n      s1 = peg$c148;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c149); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseContinueToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 8) === peg$c150) {\r\n      s1 = peg$c150;\r\n      peg$currPos += 8;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDebuggerToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 8) === peg$c152) {\r\n      s1 = peg$c152;\r\n      peg$currPos += 8;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c153); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDefaultToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 7) === peg$c154) {\r\n      s1 = peg$c154;\r\n      peg$currPos += 7;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c155); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDeleteToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 6) === peg$c156) {\r\n      s1 = peg$c156;\r\n      peg$currPos += 6;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c157); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDoToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c158) {\r\n      s1 = peg$c158;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c159); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseElseToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c160) {\r\n      s1 = peg$c160;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseEnumToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 4) === peg$c162) {\r\n      s1 = peg$c162;\r\n      peg$currPos += 4;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c163); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseExportToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 6) === peg$c164) {\r\n      s1 = peg$c164;\r\n      peg$currPos += 6;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c165); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseExtendsToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 7) === peg$c166) {\r\n      s1 = peg$c166;\r\n      peg$currPos += 7;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c167); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFalseToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c168) {\r\n      s1 = peg$c168;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c169); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFinallyToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 7) === peg$c170) {\r\n      s1 = peg$c170;\r\n      peg$currPos += 7;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c171); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseForToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 7) === peg$c172) {\r\n      s1 = peg$c172;\r\n      peg$currPos += 7;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c173); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFunctionToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 6) === peg$c174) {\r\n      s1 = peg$c174;\r\n      peg$currPos += 6;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c175); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseGetToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 3) === peg$c176) {\r\n      s1 = peg$c176;\r\n      peg$currPos += 3;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c177); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseIfToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 6) === peg$c178) {\r\n      s1 = peg$c178;\r\n      peg$currPos += 6;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c179); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseImportToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 6) === peg$c180) {\r\n      s1 = peg$c180;\r\n      peg$currPos += 6;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c181); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseInstanceofToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 10) === peg$c182) {\r\n      s1 = peg$c182;\r\n      peg$currPos += 10;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c183); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseInToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 2) === peg$c184) {\r\n      s1 = peg$c184;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c185); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseNewToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 3) === peg$c186) {\r\n      s1 = peg$c186;\r\n      peg$currPos += 3;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c187); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseNullToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 4) === peg$c188) {\r\n      s1 = peg$c188;\r\n      peg$currPos += 4;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c189); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseReturnToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 6) === peg$c190) {\r\n      s1 = peg$c190;\r\n      peg$currPos += 6;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c191); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSetToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 3) === peg$c192) {\r\n      s1 = peg$c192;\r\n      peg$currPos += 3;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c193); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSuperToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c194) {\r\n      s1 = peg$c194;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c195); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSwitchToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 6) === peg$c196) {\r\n      s1 = peg$c196;\r\n      peg$currPos += 6;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c197); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseThisToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 4) === peg$c198) {\r\n      s1 = peg$c198;\r\n      peg$currPos += 4;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c199); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseThrowToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c200) {\r\n      s1 = peg$c200;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c201); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseTrueToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 9) === peg$c202) {\r\n      s1 = peg$c202;\r\n      peg$currPos += 9;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c203); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseTryToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 3) === peg$c204) {\r\n      s1 = peg$c204;\r\n      peg$currPos += 3;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c205); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseTypeofToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 6) === peg$c206) {\r\n      s1 = peg$c206;\r\n      peg$currPos += 6;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c207); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseVarToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 4) === peg$c208) {\r\n      s1 = peg$c208;\r\n      peg$currPos += 4;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c209); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseVoidToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 4) === peg$c210) {\r\n      s1 = peg$c210;\r\n      peg$currPos += 4;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c211); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseWhileToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 12) === peg$c212) {\r\n      s1 = peg$c212;\r\n      peg$currPos += 12;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c213); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseWithToken() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 4) === peg$c214) {\r\n      s1 = peg$c214;\r\n      peg$currPos += 4;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c215); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      s3 = peg$parseIdentifierPart();\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parse__() {\r\n    var s0, s1;\r\n\r\n    s0 = [];\r\n    s1 = peg$parseWhiteSpace();\r\n    if (s1 === peg$FAILED) {\r\n      s1 = peg$parseLineTerminatorSequence();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parseComment();\r\n      }\r\n    }\r\n    while (s1 !== peg$FAILED) {\r\n      s0.push(s1);\r\n      s1 = peg$parseWhiteSpace();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parseLineTerminatorSequence();\r\n        if (s1 === peg$FAILED) {\r\n          s1 = peg$parseComment();\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parse_() {\r\n    var s0, s1;\r\n\r\n    s0 = [];\r\n    s1 = peg$parseWhiteSpace();\r\n    if (s1 === peg$FAILED) {\r\n      s1 = peg$parseMultiLineCommentNoLineTerminator();\r\n    }\r\n    while (s1 !== peg$FAILED) {\r\n      s0.push(s1);\r\n      s1 = peg$parseWhiteSpace();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parseMultiLineCommentNoLineTerminator();\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseEOS() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parse__();\r\n    if (s1 !== peg$FAILED) {\r\n      if (input.charCodeAt(peg$currPos) === 59) {\r\n        s2 = peg$c216;\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c217); }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s1 = [s1, s2];\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parse_();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseSingleLineComment();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = null;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseLineTerminatorSequence();\r\n          if (s3 !== peg$FAILED) {\r\n            s1 = [s1, s2, s3];\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parse_();\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (input.charCodeAt(peg$currPos) === 125) {\r\n            s3 = peg$c218;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c219); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s3 !== peg$FAILED) {\r\n            peg$currPos = s2;\r\n            s2 = void 0;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            s1 = [s1, s2];\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          s1 = peg$parse__();\r\n          if (s1 !== peg$FAILED) {\r\n            s2 = peg$parseEOF();\r\n            if (s2 !== peg$FAILED) {\r\n              s1 = [s1, s2];\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseEOF() {\r\n    var s0, s1;\r\n\r\n    s0 = peg$currPos;\r\n    peg$silentFails++;\r\n    if (input.length > peg$currPos) {\r\n      s1 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c1); }\r\n    }\r\n    peg$silentFails--;\r\n    if (s1 === peg$FAILED) {\r\n      s0 = void 0;\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsePrimaryExpression() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseThisToken();\r\n    if (s1 !== peg$FAILED) {\r\n      peg$savedPos = s0;\r\n      s1 = peg$c220();\r\n    }\r\n    s0 = s1;\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseIdentifier();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseLiteral();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseArrayLiteral();\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parseObjectLiteral();\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$currPos;\r\n              if (input.charCodeAt(peg$currPos) === 40) {\r\n                s1 = peg$c221;\r\n                peg$currPos++;\r\n              } else {\r\n                s1 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n              }\r\n              if (s1 !== peg$FAILED) {\r\n                s2 = peg$parse__();\r\n                if (s2 !== peg$FAILED) {\r\n                  s3 = peg$parseExpression();\r\n                  if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                      if (input.charCodeAt(peg$currPos) === 41) {\r\n                        s5 = peg$c223;\r\n                        peg$currPos++;\r\n                      } else {\r\n                        s5 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n                      }\r\n                      if (s5 !== peg$FAILED) {\r\n                        peg$savedPos = s0;\r\n                        s1 = peg$c225(s3);\r\n                        s0 = s1;\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseArrayLiteral() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 91) {\r\n      s1 = peg$c112;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        s4 = peg$parseElision();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parse__();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = null;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 93) {\r\n            s4 = peg$c114;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c226(s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 91) {\r\n        s1 = peg$c112;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseElementList();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 93) {\r\n                s5 = peg$c114;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c227(s3);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 91) {\r\n          s1 = peg$c112;\r\n          peg$currPos++;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parse__();\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$parseElementList();\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$parse__();\r\n              if (s4 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 44) {\r\n                  s5 = peg$c228;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s5 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                  s6 = peg$parse__();\r\n                  if (s6 !== peg$FAILED) {\r\n                    s7 = peg$currPos;\r\n                    s8 = peg$parseElision();\r\n                    if (s8 !== peg$FAILED) {\r\n                      s9 = peg$parse__();\r\n                      if (s9 !== peg$FAILED) {\r\n                        s8 = [s8, s9];\r\n                        s7 = s8;\r\n                      } else {\r\n                        peg$currPos = s7;\r\n                        s7 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s7;\r\n                      s7 = peg$FAILED;\r\n                    }\r\n                    if (s7 === peg$FAILED) {\r\n                      s7 = null;\r\n                    }\r\n                    if (s7 !== peg$FAILED) {\r\n                      if (input.charCodeAt(peg$currPos) === 93) {\r\n                        s8 = peg$c114;\r\n                        peg$currPos++;\r\n                      } else {\r\n                        s8 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                      }\r\n                      if (s8 !== peg$FAILED) {\r\n                        peg$savedPos = s0;\r\n                        s1 = peg$c230(s3, s7);\r\n                        s0 = s1;\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseElementList() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    s2 = peg$currPos;\r\n    s3 = peg$parseElision();\r\n    if (s3 !== peg$FAILED) {\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s3 = [s3, s4];\r\n        s2 = s3;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s2;\r\n      s2 = peg$FAILED;\r\n    }\r\n    if (s2 === peg$FAILED) {\r\n      s2 = null;\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$parseAssignmentExpression();\r\n      if (s3 !== peg$FAILED) {\r\n        peg$savedPos = s1;\r\n        s2 = peg$c231(s2, s3);\r\n        s1 = s2;\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 44) {\r\n          s5 = peg$c228;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$currPos;\r\n            s8 = peg$parseElision();\r\n            if (s8 !== peg$FAILED) {\r\n              s9 = peg$parse__();\r\n              if (s9 !== peg$FAILED) {\r\n                s8 = [s8, s9];\r\n                s7 = s8;\r\n              } else {\r\n                peg$currPos = s7;\r\n                s7 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s7;\r\n              s7 = peg$FAILED;\r\n            }\r\n            if (s7 === peg$FAILED) {\r\n              s7 = null;\r\n            }\r\n            if (s7 !== peg$FAILED) {\r\n              s8 = peg$parseAssignmentExpression();\r\n              if (s8 !== peg$FAILED) {\r\n                peg$savedPos = s3;\r\n                s4 = peg$c232(s1, s7, s8);\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c228;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$currPos;\r\n              s8 = peg$parseElision();\r\n              if (s8 !== peg$FAILED) {\r\n                s9 = peg$parse__();\r\n                if (s9 !== peg$FAILED) {\r\n                  s8 = [s8, s9];\r\n                  s7 = s8;\r\n                } else {\r\n                  peg$currPos = s7;\r\n                  s7 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s7;\r\n                s7 = peg$FAILED;\r\n              }\r\n              if (s7 === peg$FAILED) {\r\n                s7 = null;\r\n              }\r\n              if (s7 !== peg$FAILED) {\r\n                s8 = peg$parseAssignmentExpression();\r\n                if (s8 !== peg$FAILED) {\r\n                  peg$savedPos = s3;\r\n                  s4 = peg$c232(s1, s7, s8);\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c233(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseElision() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 44) {\r\n      s1 = peg$c228;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 44) {\r\n          s5 = peg$c228;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s4 = [s4, s5];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c228;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c234(s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseObjectLiteral() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 123) {\r\n      s1 = peg$c235;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 125) {\r\n          s3 = peg$c218;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c219); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c237();\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 123) {\r\n        s1 = peg$c235;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c236); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsePropertyNameAndValueList();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 125) {\r\n                s5 = peg$c218;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c219); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c238(s3);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 123) {\r\n          s1 = peg$c235;\r\n          peg$currPos++;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c236); }\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parse__();\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$parsePropertyNameAndValueList();\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$parse__();\r\n              if (s4 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 44) {\r\n                  s5 = peg$c228;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s5 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                  s6 = peg$parse__();\r\n                  if (s6 !== peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 125) {\r\n                      s7 = peg$c218;\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s7 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c219); }\r\n                    }\r\n                    if (s7 !== peg$FAILED) {\r\n                      peg$savedPos = s0;\r\n                      s1 = peg$c238(s3);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsePropertyNameAndValueList() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parsePropertyAssignment();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 44) {\r\n          s5 = peg$c228;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parsePropertyAssignment();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c228;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parsePropertyAssignment();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c239(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsePropertyAssignment() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parsePropertyName();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 58) {\r\n          s3 = peg$c240;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseAssignmentExpression();\r\n            if (s5 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c242(s1, s5);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseGetToken();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsePropertyName();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 40) {\r\n                s5 = peg$c221;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parse__();\r\n                if (s6 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 41) {\r\n                    s7 = peg$c223;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s7 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n                  }\r\n                  if (s7 !== peg$FAILED) {\r\n                    s8 = peg$parse__();\r\n                    if (s8 !== peg$FAILED) {\r\n                      if (input.charCodeAt(peg$currPos) === 123) {\r\n                        s9 = peg$c235;\r\n                        peg$currPos++;\r\n                      } else {\r\n                        s9 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c236); }\r\n                      }\r\n                      if (s9 !== peg$FAILED) {\r\n                        s10 = peg$parse__();\r\n                        if (s10 !== peg$FAILED) {\r\n                          s11 = peg$parseFunctionBody();\r\n                          if (s11 !== peg$FAILED) {\r\n                            s12 = peg$parse__();\r\n                            if (s12 !== peg$FAILED) {\r\n                              if (input.charCodeAt(peg$currPos) === 125) {\r\n                                s13 = peg$c218;\r\n                                peg$currPos++;\r\n                              } else {\r\n                                s13 = peg$FAILED;\r\n                                if (peg$silentFails === 0) { peg$fail(peg$c219); }\r\n                              }\r\n                              if (s13 !== peg$FAILED) {\r\n                                peg$savedPos = s0;\r\n                                s1 = peg$c243(s3, s11);\r\n                                s0 = s1;\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseSetToken();\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parse__();\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$parsePropertyName();\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$parse__();\r\n              if (s4 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 40) {\r\n                  s5 = peg$c221;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s5 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                  s6 = peg$parse__();\r\n                  if (s6 !== peg$FAILED) {\r\n                    s7 = peg$parsePropertySetParameterList();\r\n                    if (s7 !== peg$FAILED) {\r\n                      s8 = peg$parse__();\r\n                      if (s8 !== peg$FAILED) {\r\n                        if (input.charCodeAt(peg$currPos) === 41) {\r\n                          s9 = peg$c223;\r\n                          peg$currPos++;\r\n                        } else {\r\n                          s9 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n                        }\r\n                        if (s9 !== peg$FAILED) {\r\n                          s10 = peg$parse__();\r\n                          if (s10 !== peg$FAILED) {\r\n                            if (input.charCodeAt(peg$currPos) === 123) {\r\n                              s11 = peg$c235;\r\n                              peg$currPos++;\r\n                            } else {\r\n                              s11 = peg$FAILED;\r\n                              if (peg$silentFails === 0) { peg$fail(peg$c236); }\r\n                            }\r\n                            if (s11 !== peg$FAILED) {\r\n                              s12 = peg$parse__();\r\n                              if (s12 !== peg$FAILED) {\r\n                                s13 = peg$parseFunctionBody();\r\n                                if (s13 !== peg$FAILED) {\r\n                                  s14 = peg$parse__();\r\n                                  if (s14 !== peg$FAILED) {\r\n                                    if (input.charCodeAt(peg$currPos) === 125) {\r\n                                      s15 = peg$c218;\r\n                                      peg$currPos++;\r\n                                    } else {\r\n                                      s15 = peg$FAILED;\r\n                                      if (peg$silentFails === 0) { peg$fail(peg$c219); }\r\n                                    }\r\n                                    if (s15 !== peg$FAILED) {\r\n                                      peg$savedPos = s0;\r\n                                      s1 = peg$c244(s3, s7, s13);\r\n                                      s0 = s1;\r\n                                    } else {\r\n                                      peg$currPos = s0;\r\n                                      s0 = peg$FAILED;\r\n                                    }\r\n                                  } else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s0;\r\n                                  s0 = peg$FAILED;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsePropertyName() {\r\n    var s0;\r\n\r\n    s0 = peg$parseIdentifierName();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseStringLiteral();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseNumericLiteral();\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsePropertySetParameterList() {\r\n    var s0, s1;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseIdentifier();\r\n    if (s1 !== peg$FAILED) {\r\n      peg$savedPos = s0;\r\n      s1 = peg$c245(s1);\r\n    }\r\n    s0 = s1;\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseMemberExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parsePrimaryExpression();\r\n    if (s1 === peg$FAILED) {\r\n      s1 = peg$parseFunctionExpression();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$currPos;\r\n        s2 = peg$parseNewToken();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parse__();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseMemberExpression();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parse__();\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parseArguments();\r\n                if (s6 !== peg$FAILED) {\r\n                  peg$savedPos = s1;\r\n                  s2 = peg$c246(s4, s6);\r\n                  s1 = s2;\r\n                } else {\r\n                  peg$currPos = s1;\r\n                  s1 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s1;\r\n                s1 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s1;\r\n              s1 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$FAILED;\r\n        }\r\n      }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 91) {\r\n          s5 = peg$c112;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s8 = peg$parse__();\r\n              if (s8 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 93) {\r\n                  s9 = peg$c114;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s9 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                }\r\n                if (s9 !== peg$FAILED) {\r\n                  peg$savedPos = s3;\r\n                  s4 = peg$c247(s1, s7);\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 === peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 46) {\r\n            s5 = peg$c54;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c55); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseIdentifierName();\r\n              if (s7 !== peg$FAILED) {\r\n                peg$savedPos = s3;\r\n                s4 = peg$c248(s1, s7);\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 91) {\r\n            s5 = peg$c112;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s8 = peg$parse__();\r\n                if (s8 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 93) {\r\n                    s9 = peg$c114;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s9 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                  }\r\n                  if (s9 !== peg$FAILED) {\r\n                    peg$savedPos = s3;\r\n                    s4 = peg$c247(s1, s7);\r\n                    s3 = s4;\r\n                  } else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 46) {\r\n              s5 = peg$c54;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c55); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parseIdentifierName();\r\n                if (s7 !== peg$FAILED) {\r\n                  peg$savedPos = s3;\r\n                  s4 = peg$c248(s1, s7);\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c249(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseNewExpression() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$parseMemberExpression();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseNewToken();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseNewExpression();\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c250(s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseCallExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    s2 = peg$parseMemberExpression();\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$parse__();\r\n      if (s3 !== peg$FAILED) {\r\n        s4 = peg$parseArguments();\r\n        if (s4 !== peg$FAILED) {\r\n          peg$savedPos = s1;\r\n          s2 = peg$c251(s2, s4);\r\n          s1 = s2;\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseArguments();\r\n        if (s5 !== peg$FAILED) {\r\n          peg$savedPos = s3;\r\n          s4 = peg$c252(s1, s5);\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 === peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 91) {\r\n            s5 = peg$c112;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s8 = peg$parse__();\r\n                if (s8 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 93) {\r\n                    s9 = peg$c114;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s9 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                  }\r\n                  if (s9 !== peg$FAILED) {\r\n                    peg$savedPos = s3;\r\n                    s4 = peg$c253(s1, s7);\r\n                    s3 = s4;\r\n                  } else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 46) {\r\n              s5 = peg$c54;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c55); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parseIdentifierName();\r\n                if (s7 !== peg$FAILED) {\r\n                  peg$savedPos = s3;\r\n                  s4 = peg$c254(s1, s7);\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        }\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseArguments();\r\n          if (s5 !== peg$FAILED) {\r\n            peg$savedPos = s3;\r\n            s4 = peg$c252(s1, s5);\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 91) {\r\n              s5 = peg$c112;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parseExpression();\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 93) {\r\n                      s9 = peg$c114;\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s9 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                    }\r\n                    if (s9 !== peg$FAILED) {\r\n                      peg$savedPos = s3;\r\n                      s4 = peg$c253(s1, s7);\r\n                      s3 = s4;\r\n                    } else {\r\n                      peg$currPos = s3;\r\n                      s3 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$currPos;\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 46) {\r\n                s5 = peg$c54;\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c55); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parse__();\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parseIdentifierName();\r\n                  if (s7 !== peg$FAILED) {\r\n                    peg$savedPos = s3;\r\n                    s4 = peg$c254(s1, s7);\r\n                    s3 = s4;\r\n                  } else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c255(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseArguments() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 40) {\r\n      s1 = peg$c221;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        s4 = peg$parseArgumentList();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parse__();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = null;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 41) {\r\n            s4 = peg$c223;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c256(s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseArgumentList() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseAssignmentExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 44) {\r\n          s5 = peg$c228;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseAssignmentExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c228;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseAssignmentExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c239(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLeftHandSideExpression() {\r\n    var s0;\r\n\r\n    s0 = peg$parseCallExpression();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseNewExpression();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsePostfixExpression() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseLeftHandSideExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse_();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parsePostfixOperator();\r\n        if (s3 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c257(s1, s3);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseLeftHandSideExpression();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsePostfixOperator() {\r\n    var s0;\r\n\r\n    if (input.substr(peg$currPos, 2) === peg$c258) {\r\n      s0 = peg$c258;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c259); }\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      if (input.substr(peg$currPos, 2) === peg$c260) {\r\n        s0 = peg$c260;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c261); }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseUnaryExpression() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$parsePostfixExpression();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseUnaryOperator();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseUnaryExpression();\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c262(s1, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseUnaryOperator() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseDeleteToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s0 = input.substring(s0, peg$currPos);\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseVoidToken();\r\n      if (s1 !== peg$FAILED) {\r\n        s0 = input.substring(s0, peg$currPos);\r\n      } else {\r\n        s0 = s1;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseTypeofToken();\r\n        if (s1 !== peg$FAILED) {\r\n          s0 = input.substring(s0, peg$currPos);\r\n        } else {\r\n          s0 = s1;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          if (input.substr(peg$currPos, 2) === peg$c258) {\r\n            s0 = peg$c258;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c259); }\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 2) === peg$c260) {\r\n              s0 = peg$c260;\r\n              peg$currPos += 2;\r\n            } else {\r\n              s0 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c261); }\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$currPos;\r\n              s1 = peg$currPos;\r\n              if (input.charCodeAt(peg$currPos) === 43) {\r\n                s2 = peg$c263;\r\n                peg$currPos++;\r\n              } else {\r\n                s2 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c264); }\r\n              }\r\n              if (s2 !== peg$FAILED) {\r\n                s3 = peg$currPos;\r\n                peg$silentFails++;\r\n                if (input.charCodeAt(peg$currPos) === 61) {\r\n                  s4 = peg$c265;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s4 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c266); }\r\n                }\r\n                peg$silentFails--;\r\n                if (s4 === peg$FAILED) {\r\n                  s3 = void 0;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                  s2 = [s2, s3];\r\n                  s1 = s2;\r\n                } else {\r\n                  peg$currPos = s1;\r\n                  s1 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s1;\r\n                s1 = peg$FAILED;\r\n              }\r\n              if (s1 !== peg$FAILED) {\r\n                s0 = input.substring(s0, peg$currPos);\r\n              } else {\r\n                s0 = s1;\r\n              }\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$currPos;\r\n                s1 = peg$currPos;\r\n                if (input.charCodeAt(peg$currPos) === 45) {\r\n                  s2 = peg$c267;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s2 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c268); }\r\n                }\r\n                if (s2 !== peg$FAILED) {\r\n                  s3 = peg$currPos;\r\n                  peg$silentFails++;\r\n                  if (input.charCodeAt(peg$currPos) === 61) {\r\n                    s4 = peg$c265;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s4 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c266); }\r\n                  }\r\n                  peg$silentFails--;\r\n                  if (s4 === peg$FAILED) {\r\n                    s3 = void 0;\r\n                  } else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                  }\r\n                  if (s3 !== peg$FAILED) {\r\n                    s2 = [s2, s3];\r\n                    s1 = s2;\r\n                  } else {\r\n                    peg$currPos = s1;\r\n                    s1 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s1;\r\n                  s1 = peg$FAILED;\r\n                }\r\n                if (s1 !== peg$FAILED) {\r\n                  s0 = input.substring(s0, peg$currPos);\r\n                } else {\r\n                  s0 = s1;\r\n                }\r\n                if (s0 === peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 126) {\r\n                    s0 = peg$c269;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s0 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c270); }\r\n                  }\r\n                  if (s0 === peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 33) {\r\n                      s0 = peg$c271;\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s0 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c272); }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseMultiplicativeExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseUnaryExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseMultiplicativeOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseUnaryExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseMultiplicativeOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseUnaryExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseMultiplicativeOperator() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 42) {\r\n      s2 = peg$c274;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c275); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (input.charCodeAt(peg$currPos) === 61) {\r\n        s4 = peg$c265;\r\n        peg$currPos++;\r\n      } else {\r\n        s4 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c266); }\r\n      }\r\n      peg$silentFails--;\r\n      if (s4 === peg$FAILED) {\r\n        s3 = void 0;\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = [s2, s3];\r\n        s1 = s2;\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s0 = input.substring(s0, peg$currPos);\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 47) {\r\n        s2 = peg$c105;\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c106); }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        peg$silentFails++;\r\n        if (input.charCodeAt(peg$currPos) === 61) {\r\n          s4 = peg$c265;\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c266); }\r\n        }\r\n        peg$silentFails--;\r\n        if (s4 === peg$FAILED) {\r\n          s3 = void 0;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s2 = [s2, s3];\r\n          s1 = s2;\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s0 = input.substring(s0, peg$currPos);\r\n      } else {\r\n        s0 = s1;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 37) {\r\n          s2 = peg$c276;\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c277); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (input.charCodeAt(peg$currPos) === 61) {\r\n            s4 = peg$c265;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c266); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s4 === peg$FAILED) {\r\n            s3 = void 0;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s2 = [s2, s3];\r\n            s1 = s2;\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$FAILED;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s0 = input.substring(s0, peg$currPos);\r\n        } else {\r\n          s0 = s1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseAdditiveExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseMultiplicativeExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseAdditiveOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseMultiplicativeExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseAdditiveOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseMultiplicativeExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseAdditiveOperator() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 43) {\r\n      s2 = peg$c263;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c264); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (peg$c278.test(input.charAt(peg$currPos))) {\r\n        s4 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s4 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c279); }\r\n      }\r\n      peg$silentFails--;\r\n      if (s4 === peg$FAILED) {\r\n        s3 = void 0;\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = [s2, s3];\r\n        s1 = s2;\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s0 = input.substring(s0, peg$currPos);\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 45) {\r\n        s2 = peg$c267;\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c268); }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        peg$silentFails++;\r\n        if (peg$c280.test(input.charAt(peg$currPos))) {\r\n          s4 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c281); }\r\n        }\r\n        peg$silentFails--;\r\n        if (s4 === peg$FAILED) {\r\n          s3 = void 0;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s2 = [s2, s3];\r\n          s1 = s2;\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s0 = input.substring(s0, peg$currPos);\r\n      } else {\r\n        s0 = s1;\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseShiftExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseAdditiveExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseShiftOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseAdditiveExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseShiftOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseAdditiveExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseShiftOperator() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    if (input.substr(peg$currPos, 2) === peg$c282) {\r\n      s2 = peg$c282;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c283); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (input.charCodeAt(peg$currPos) === 61) {\r\n        s4 = peg$c265;\r\n        peg$currPos++;\r\n      } else {\r\n        s4 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c266); }\r\n      }\r\n      peg$silentFails--;\r\n      if (s4 === peg$FAILED) {\r\n        s3 = void 0;\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = [s2, s3];\r\n        s1 = s2;\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s0 = input.substring(s0, peg$currPos);\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$currPos;\r\n      if (input.substr(peg$currPos, 3) === peg$c284) {\r\n        s2 = peg$c284;\r\n        peg$currPos += 3;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c285); }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        peg$silentFails++;\r\n        if (input.charCodeAt(peg$currPos) === 61) {\r\n          s4 = peg$c265;\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c266); }\r\n        }\r\n        peg$silentFails--;\r\n        if (s4 === peg$FAILED) {\r\n          s3 = void 0;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s2 = [s2, s3];\r\n          s1 = s2;\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s0 = input.substring(s0, peg$currPos);\r\n      } else {\r\n        s0 = s1;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$currPos;\r\n        if (input.substr(peg$currPos, 2) === peg$c286) {\r\n          s2 = peg$c286;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c287); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (input.charCodeAt(peg$currPos) === 61) {\r\n            s4 = peg$c265;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c266); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s4 === peg$FAILED) {\r\n            s3 = void 0;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s2 = [s2, s3];\r\n            s1 = s2;\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$FAILED;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s0 = input.substring(s0, peg$currPos);\r\n        } else {\r\n          s0 = s1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRelationalExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseShiftExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseRelationalOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseShiftExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseRelationalOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseShiftExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRelationalOperator() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    if (input.substr(peg$currPos, 2) === peg$c288) {\r\n      s0 = peg$c288;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c289); }\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      if (input.substr(peg$currPos, 2) === peg$c290) {\r\n        s0 = peg$c290;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c291); }\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 60) {\r\n          s2 = peg$c292;\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c293); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (input.charCodeAt(peg$currPos) === 60) {\r\n            s4 = peg$c292;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c293); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s4 === peg$FAILED) {\r\n            s3 = void 0;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s2 = [s2, s3];\r\n            s1 = s2;\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$FAILED;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s0 = input.substring(s0, peg$currPos);\r\n        } else {\r\n          s0 = s1;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          s1 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 62) {\r\n            s2 = peg$c294;\r\n            peg$currPos++;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c295); }\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$currPos;\r\n            peg$silentFails++;\r\n            if (input.charCodeAt(peg$currPos) === 62) {\r\n              s4 = peg$c294;\r\n              peg$currPos++;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c295); }\r\n            }\r\n            peg$silentFails--;\r\n            if (s4 === peg$FAILED) {\r\n              s3 = void 0;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              s2 = [s2, s3];\r\n              s1 = s2;\r\n            } else {\r\n              peg$currPos = s1;\r\n              s1 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$FAILED;\r\n          }\r\n          if (s1 !== peg$FAILED) {\r\n            s0 = input.substring(s0, peg$currPos);\r\n          } else {\r\n            s0 = s1;\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            s1 = peg$parseInstanceofToken();\r\n            if (s1 !== peg$FAILED) {\r\n              s0 = input.substring(s0, peg$currPos);\r\n            } else {\r\n              s0 = s1;\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$currPos;\r\n              s1 = peg$parseInToken();\r\n              if (s1 !== peg$FAILED) {\r\n                s0 = input.substring(s0, peg$currPos);\r\n              } else {\r\n                s0 = s1;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRelationalExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseShiftExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseRelationalOperatorNoIn();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseShiftExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseRelationalOperatorNoIn();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseShiftExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseRelationalOperatorNoIn() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    if (input.substr(peg$currPos, 2) === peg$c288) {\r\n      s0 = peg$c288;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c289); }\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      if (input.substr(peg$currPos, 2) === peg$c290) {\r\n        s0 = peg$c290;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c291); }\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 60) {\r\n          s2 = peg$c292;\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c293); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (input.charCodeAt(peg$currPos) === 60) {\r\n            s4 = peg$c292;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c293); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s4 === peg$FAILED) {\r\n            s3 = void 0;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s2 = [s2, s3];\r\n            s1 = s2;\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s1;\r\n          s1 = peg$FAILED;\r\n        }\r\n        if (s1 !== peg$FAILED) {\r\n          s0 = input.substring(s0, peg$currPos);\r\n        } else {\r\n          s0 = s1;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          s1 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 62) {\r\n            s2 = peg$c294;\r\n            peg$currPos++;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c295); }\r\n          }\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$currPos;\r\n            peg$silentFails++;\r\n            if (input.charCodeAt(peg$currPos) === 62) {\r\n              s4 = peg$c294;\r\n              peg$currPos++;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c295); }\r\n            }\r\n            peg$silentFails--;\r\n            if (s4 === peg$FAILED) {\r\n              s3 = void 0;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              s2 = [s2, s3];\r\n              s1 = s2;\r\n            } else {\r\n              peg$currPos = s1;\r\n              s1 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s1;\r\n            s1 = peg$FAILED;\r\n          }\r\n          if (s1 !== peg$FAILED) {\r\n            s0 = input.substring(s0, peg$currPos);\r\n          } else {\r\n            s0 = s1;\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            s1 = peg$parseInstanceofToken();\r\n            if (s1 !== peg$FAILED) {\r\n              s0 = input.substring(s0, peg$currPos);\r\n            } else {\r\n              s0 = s1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseEqualityExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseRelationalExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseEqualityOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseRelationalExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseEqualityOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseRelationalExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseEqualityExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseRelationalExpressionNoIn();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseEqualityOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseRelationalExpressionNoIn();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseEqualityOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseRelationalExpressionNoIn();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseEqualityOperator() {\r\n    var s0;\r\n\r\n    if (input.substr(peg$currPos, 3) === peg$c296) {\r\n      s0 = peg$c296;\r\n      peg$currPos += 3;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c297); }\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      if (input.substr(peg$currPos, 3) === peg$c298) {\r\n        s0 = peg$c298;\r\n        peg$currPos += 3;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c299); }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBitwiseANDExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseEqualityExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseBitwiseANDOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseEqualityExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseBitwiseANDOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseEqualityExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBitwiseANDExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseEqualityExpressionNoIn();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseBitwiseANDOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseEqualityExpressionNoIn();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseBitwiseANDOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseEqualityExpressionNoIn();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBitwiseANDOperator() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 38) {\r\n      s2 = peg$c300;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c301); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (peg$c302.test(input.charAt(peg$currPos))) {\r\n        s4 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s4 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c303); }\r\n      }\r\n      peg$silentFails--;\r\n      if (s4 === peg$FAILED) {\r\n        s3 = void 0;\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = [s2, s3];\r\n        s1 = s2;\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s0 = input.substring(s0, peg$currPos);\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBitwiseXORExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseBitwiseANDExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseBitwiseXOROperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseBitwiseANDExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseBitwiseXOROperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseBitwiseANDExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBitwiseXORExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseBitwiseANDExpressionNoIn();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseBitwiseXOROperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseBitwiseANDExpressionNoIn();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseBitwiseXOROperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseBitwiseANDExpressionNoIn();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBitwiseXOROperator() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 94) {\r\n      s2 = peg$c304;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c305); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (input.charCodeAt(peg$currPos) === 61) {\r\n        s4 = peg$c265;\r\n        peg$currPos++;\r\n      } else {\r\n        s4 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c266); }\r\n      }\r\n      peg$silentFails--;\r\n      if (s4 === peg$FAILED) {\r\n        s3 = void 0;\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = [s2, s3];\r\n        s1 = s2;\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s0 = input.substring(s0, peg$currPos);\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBitwiseORExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseBitwiseXORExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseBitwiseOROperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseBitwiseXORExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseBitwiseOROperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseBitwiseXORExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBitwiseORExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseBitwiseXORExpressionNoIn();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseBitwiseOROperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseBitwiseXORExpressionNoIn();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseBitwiseOROperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseBitwiseXORExpressionNoIn();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c273(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBitwiseOROperator() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 124) {\r\n      s2 = peg$c306;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c307); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (peg$c308.test(input.charAt(peg$currPos))) {\r\n        s4 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s4 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c309); }\r\n      }\r\n      peg$silentFails--;\r\n      if (s4 === peg$FAILED) {\r\n        s3 = void 0;\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s2 = [s2, s3];\r\n        s1 = s2;\r\n      } else {\r\n        peg$currPos = s1;\r\n        s1 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s0 = input.substring(s0, peg$currPos);\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLogicalANDExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseBitwiseORExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseLogicalANDOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseBitwiseORExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseLogicalANDOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseBitwiseORExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c310(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLogicalANDExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseBitwiseORExpressionNoIn();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseLogicalANDOperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseBitwiseORExpressionNoIn();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseLogicalANDOperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseBitwiseORExpressionNoIn();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c310(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLogicalANDOperator() {\r\n    var s0;\r\n\r\n    if (input.substr(peg$currPos, 2) === peg$c311) {\r\n      s0 = peg$c311;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c312); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLogicalORExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseLogicalANDExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseLogicalOROperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseLogicalANDExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseLogicalOROperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseLogicalANDExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c310(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLogicalORExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseLogicalANDExpressionNoIn();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseLogicalOROperator();\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseLogicalANDExpressionNoIn();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseLogicalOROperator();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseLogicalANDExpressionNoIn();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c310(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLogicalOROperator() {\r\n    var s0;\r\n\r\n    if (input.substr(peg$currPos, 2) === peg$c313) {\r\n      s0 = peg$c313;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c314); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseConditionalExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseLogicalORExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 63) {\r\n          s3 = peg$c315;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c316); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseAssignmentExpression();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 58) {\r\n                  s7 = peg$c240;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parseAssignmentExpression();\r\n                    if (s9 !== peg$FAILED) {\r\n                      peg$savedPos = s0;\r\n                      s1 = peg$c317(s1, s5, s9);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseLogicalORExpression();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseConditionalExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseLogicalORExpressionNoIn();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 63) {\r\n          s3 = peg$c315;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c316); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseAssignmentExpression();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 58) {\r\n                  s7 = peg$c240;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parseAssignmentExpressionNoIn();\r\n                    if (s9 !== peg$FAILED) {\r\n                      peg$savedPos = s0;\r\n                      s1 = peg$c317(s1, s5, s9);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseLogicalORExpressionNoIn();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseAssignmentExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseLeftHandSideExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.substr(peg$currPos, 2) === peg$c318) {\r\n          s3 = peg$c318;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c319); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (input.substr(peg$currPos, 2) === peg$c318) {\r\n            s5 = peg$c318;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c319); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s5 === peg$FAILED) {\r\n            s4 = void 0;\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$FAILED;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parse__();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parseAssignmentExpression();\r\n              if (s6 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c320(s1, s6);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseLeftHandSideExpression();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseAssignmentOperator();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parseAssignmentExpression();\r\n              if (s5 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c321(s1, s3, s5);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseConditionalExpression();\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseAssignmentExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseLeftHandSideExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.substr(peg$currPos, 2) === peg$c318) {\r\n          s3 = peg$c318;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c319); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (input.substr(peg$currPos, 2) === peg$c318) {\r\n            s5 = peg$c318;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c319); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s5 === peg$FAILED) {\r\n            s4 = void 0;\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$FAILED;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parse__();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parseAssignmentExpressionNoIn();\r\n              if (s6 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c320(s1, s6);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseLeftHandSideExpression();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseAssignmentOperator();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parseAssignmentExpressionNoIn();\r\n              if (s5 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c321(s1, s3, s5);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseConditionalExpressionNoIn();\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseAssignmentOperator() {\r\n    var s0;\r\n\r\n    if (input.substr(peg$currPos, 2) === peg$c322) {\r\n      s0 = peg$c322;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s0 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c323); }\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      if (input.substr(peg$currPos, 2) === peg$c324) {\r\n        s0 = peg$c324;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s0 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c325); }\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        if (input.substr(peg$currPos, 2) === peg$c326) {\r\n          s0 = peg$c326;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s0 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c327); }\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          if (input.substr(peg$currPos, 2) === peg$c328) {\r\n            s0 = peg$c328;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s0 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c329); }\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 2) === peg$c330) {\r\n              s0 = peg$c330;\r\n              peg$currPos += 2;\r\n            } else {\r\n              s0 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c331); }\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n              if (input.substr(peg$currPos, 3) === peg$c332) {\r\n                s0 = peg$c332;\r\n                peg$currPos += 3;\r\n              } else {\r\n                s0 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c333); }\r\n              }\r\n              if (s0 === peg$FAILED) {\r\n                if (input.substr(peg$currPos, 3) === peg$c334) {\r\n                  s0 = peg$c334;\r\n                  peg$currPos += 3;\r\n                } else {\r\n                  s0 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c335); }\r\n                }\r\n                if (s0 === peg$FAILED) {\r\n                  if (input.substr(peg$currPos, 4) === peg$c336) {\r\n                    s0 = peg$c336;\r\n                    peg$currPos += 4;\r\n                  } else {\r\n                    s0 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c337); }\r\n                  }\r\n                  if (s0 === peg$FAILED) {\r\n                    if (input.substr(peg$currPos, 2) === peg$c338) {\r\n                      s0 = peg$c338;\r\n                      peg$currPos += 2;\r\n                    } else {\r\n                      s0 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c339); }\r\n                    }\r\n                    if (s0 === peg$FAILED) {\r\n                      if (input.substr(peg$currPos, 2) === peg$c340) {\r\n                        s0 = peg$c340;\r\n                        peg$currPos += 2;\r\n                      } else {\r\n                        s0 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c341); }\r\n                      }\r\n                      if (s0 === peg$FAILED) {\r\n                        if (input.substr(peg$currPos, 2) === peg$c342) {\r\n                          s0 = peg$c342;\r\n                          peg$currPos += 2;\r\n                        } else {\r\n                          s0 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c343); }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseAssignmentExpression();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 44) {\r\n          s5 = peg$c228;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseAssignmentExpression();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c228;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseAssignmentExpression();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c344(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseExpressionNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseAssignmentExpressionNoIn();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 44) {\r\n          s5 = peg$c228;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseAssignmentExpressionNoIn();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c228;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseAssignmentExpressionNoIn();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c344(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseStatement() {\r\n    var s0;\r\n\r\n    s0 = peg$parseBlock();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseVariableStatement();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseEmptyStatement();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parseExpressionStatement();\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parseIfStatement();\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$parseIterationStatement();\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$parseContinueStatement();\r\n                if (s0 === peg$FAILED) {\r\n                  s0 = peg$parseBreakStatement();\r\n                  if (s0 === peg$FAILED) {\r\n                    s0 = peg$parseReturnStatement();\r\n                    if (s0 === peg$FAILED) {\r\n                      s0 = peg$parseWithStatement();\r\n                      if (s0 === peg$FAILED) {\r\n                        s0 = peg$parseLabelledStatement();\r\n                        if (s0 === peg$FAILED) {\r\n                          s0 = peg$parseSwitchStatement();\r\n                          if (s0 === peg$FAILED) {\r\n                            s0 = peg$parseThrowStatement();\r\n                            if (s0 === peg$FAILED) {\r\n                              s0 = peg$parseTryStatement();\r\n                              if (s0 === peg$FAILED) {\r\n                                s0 = peg$parseDebuggerStatement();\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBlock() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 40) {\r\n      s1 = peg$c221;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        s4 = peg$parseStatementList();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parse__();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = null;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 41) {\r\n            s4 = peg$c223;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c345(s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseStatementList() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseStatement();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseStatement();\r\n        if (s5 !== peg$FAILED) {\r\n          s4 = [s4, s5];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseStatement();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c346(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseVariableStatement() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseVarToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parseVariableDeclarationList();\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parseEOS();\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c347(s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseVariableDeclarationList() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseVariableDeclaration();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 58) {\r\n          s5 = peg$c240;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseVariableDeclaration();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 58) {\r\n            s5 = peg$c240;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseVariableDeclaration();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c239(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseVariableDeclarationListNoIn() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseVariableDeclarationNoIn();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 58) {\r\n          s5 = peg$c240;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseVariableDeclarationNoIn();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 58) {\r\n            s5 = peg$c240;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseVariableDeclarationNoIn();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c239(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseVariableDeclaration() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseIdentifier();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      s3 = peg$parse__();\r\n      if (s3 !== peg$FAILED) {\r\n        s4 = peg$parseInitialiser();\r\n        if (s4 !== peg$FAILED) {\r\n          s3 = [s3, s4];\r\n          s2 = s3;\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 === peg$FAILED) {\r\n        s2 = null;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c348(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseVariableDeclarationNoIn() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseIdentifier();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      s3 = peg$parse__();\r\n      if (s3 !== peg$FAILED) {\r\n        s4 = peg$parseInitialiserNoIn();\r\n        if (s4 !== peg$FAILED) {\r\n          s3 = [s3, s4];\r\n          s2 = s3;\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 === peg$FAILED) {\r\n        s2 = null;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c348(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseInitialiser() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 2) === peg$c318) {\r\n      s1 = peg$c318;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c319); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (input.substr(peg$currPos, 2) === peg$c318) {\r\n        s3 = peg$c318;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s3 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c319); }\r\n      }\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parse__();\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parseAssignmentExpression();\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c225(s4);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseInitialiserNoIn() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 2) === peg$c318) {\r\n      s1 = peg$c318;\r\n      peg$currPos += 2;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c319); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      peg$silentFails++;\r\n      if (input.substr(peg$currPos, 2) === peg$c318) {\r\n        s3 = peg$c318;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s3 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c319); }\r\n      }\r\n      peg$silentFails--;\r\n      if (s3 === peg$FAILED) {\r\n        s2 = void 0;\r\n      } else {\r\n        peg$currPos = s2;\r\n        s2 = peg$FAILED;\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parse__();\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parseAssignmentExpressionNoIn();\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c225(s4);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseEmptyStatement() {\r\n    var s0, s1;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 59) {\r\n      s1 = peg$c216;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c217); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      peg$savedPos = s0;\r\n      s1 = peg$c349();\r\n    }\r\n    s0 = s1;\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseExpressionStatement() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    peg$silentFails++;\r\n    if (input.charCodeAt(peg$currPos) === 123) {\r\n      s2 = peg$c235;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\r\n    }\r\n    if (s2 === peg$FAILED) {\r\n      s2 = peg$parseFunctionToken();\r\n    }\r\n    peg$silentFails--;\r\n    if (s2 === peg$FAILED) {\r\n      s1 = void 0;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseExpression();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parseEOS();\r\n        if (s3 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c350(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseIfStatement() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseIfToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 91) {\r\n          s3 = peg$c112;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseExpression();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 93) {\r\n                  s7 = peg$c114;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parseStatement();\r\n                    if (s9 !== peg$FAILED) {\r\n                      s10 = peg$parse__();\r\n                      if (s10 !== peg$FAILED) {\r\n                        s11 = peg$parseElseToken();\r\n                        if (s11 !== peg$FAILED) {\r\n                          s12 = peg$parse__();\r\n                          if (s12 !== peg$FAILED) {\r\n                            s13 = peg$parseStatement();\r\n                            if (s13 !== peg$FAILED) {\r\n                              peg$savedPos = s0;\r\n                              s1 = peg$c351(s5, s9, s13);\r\n                              s0 = s1;\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseIfToken();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 91) {\r\n            s3 = peg$c112;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parseExpression();\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parse__();\r\n                if (s6 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 93) {\r\n                    s7 = peg$c114;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s7 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                  }\r\n                  if (s7 !== peg$FAILED) {\r\n                    s8 = peg$parse__();\r\n                    if (s8 !== peg$FAILED) {\r\n                      s9 = peg$parseStatement();\r\n                      if (s9 !== peg$FAILED) {\r\n                        peg$savedPos = s0;\r\n                        s1 = peg$c352(s5, s9);\r\n                        s0 = s1;\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseIterationStatement() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseDoToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parseStatement();\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseWhileToken();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 91) {\r\n                  s7 = peg$c112;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parseExpression();\r\n                    if (s9 !== peg$FAILED) {\r\n                      s10 = peg$parse__();\r\n                      if (s10 !== peg$FAILED) {\r\n                        if (input.charCodeAt(peg$currPos) === 93) {\r\n                          s11 = peg$c114;\r\n                          peg$currPos++;\r\n                        } else {\r\n                          s11 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                        }\r\n                        if (s11 !== peg$FAILED) {\r\n                          s12 = peg$parseEOS();\r\n                          if (s12 !== peg$FAILED) {\r\n                            peg$savedPos = s0;\r\n                            s1 = peg$c353(s3, s9);\r\n                            s0 = s1;\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseWhileToken();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 91) {\r\n            s3 = peg$c112;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parseExpression();\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parse__();\r\n                if (s6 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 93) {\r\n                    s7 = peg$c114;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s7 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                  }\r\n                  if (s7 !== peg$FAILED) {\r\n                    s8 = peg$parse__();\r\n                    if (s8 !== peg$FAILED) {\r\n                      s9 = peg$parseStatement();\r\n                      if (s9 !== peg$FAILED) {\r\n                        peg$savedPos = s0;\r\n                        s1 = peg$c354(s5, s9);\r\n                        s0 = s1;\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseForToken();\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parse__();\r\n          if (s2 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 91) {\r\n              s3 = peg$c112;\r\n              peg$currPos++;\r\n            } else {\r\n              s3 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$parse__();\r\n              if (s4 !== peg$FAILED) {\r\n                s5 = peg$currPos;\r\n                s6 = peg$parseExpressionNoIn();\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parse__();\r\n                  if (s7 !== peg$FAILED) {\r\n                    s6 = [s6, s7];\r\n                    s5 = s6;\r\n                  } else {\r\n                    peg$currPos = s5;\r\n                    s5 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s5;\r\n                  s5 = peg$FAILED;\r\n                }\r\n                if (s5 === peg$FAILED) {\r\n                  s5 = null;\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 58) {\r\n                    s6 = peg$c240;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s6 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n                  }\r\n                  if (s6 !== peg$FAILED) {\r\n                    s7 = peg$parse__();\r\n                    if (s7 !== peg$FAILED) {\r\n                      s8 = peg$currPos;\r\n                      s9 = peg$parseExpression();\r\n                      if (s9 !== peg$FAILED) {\r\n                        s10 = peg$parse__();\r\n                        if (s10 !== peg$FAILED) {\r\n                          s9 = [s9, s10];\r\n                          s8 = s9;\r\n                        } else {\r\n                          peg$currPos = s8;\r\n                          s8 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s8;\r\n                        s8 = peg$FAILED;\r\n                      }\r\n                      if (s8 === peg$FAILED) {\r\n                        s8 = null;\r\n                      }\r\n                      if (s8 !== peg$FAILED) {\r\n                        if (input.charCodeAt(peg$currPos) === 58) {\r\n                          s9 = peg$c240;\r\n                          peg$currPos++;\r\n                        } else {\r\n                          s9 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n                        }\r\n                        if (s9 !== peg$FAILED) {\r\n                          s10 = peg$parse__();\r\n                          if (s10 !== peg$FAILED) {\r\n                            s11 = peg$currPos;\r\n                            s12 = peg$parseExpression();\r\n                            if (s12 !== peg$FAILED) {\r\n                              s13 = peg$parse__();\r\n                              if (s13 !== peg$FAILED) {\r\n                                s12 = [s12, s13];\r\n                                s11 = s12;\r\n                              } else {\r\n                                peg$currPos = s11;\r\n                                s11 = peg$FAILED;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s11;\r\n                              s11 = peg$FAILED;\r\n                            }\r\n                            if (s11 === peg$FAILED) {\r\n                              s11 = null;\r\n                            }\r\n                            if (s11 !== peg$FAILED) {\r\n                              if (input.charCodeAt(peg$currPos) === 93) {\r\n                                s12 = peg$c114;\r\n                                peg$currPos++;\r\n                              } else {\r\n                                s12 = peg$FAILED;\r\n                                if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                              }\r\n                              if (s12 !== peg$FAILED) {\r\n                                s13 = peg$parse__();\r\n                                if (s13 !== peg$FAILED) {\r\n                                  s14 = peg$parseStatement();\r\n                                  if (s14 !== peg$FAILED) {\r\n                                    peg$savedPos = s0;\r\n                                    s1 = peg$c355(s5, s8, s11, s14);\r\n                                    s0 = s1;\r\n                                  } else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s0;\r\n                                  s0 = peg$FAILED;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          s1 = peg$parseForToken();\r\n          if (s1 !== peg$FAILED) {\r\n            s2 = peg$parse__();\r\n            if (s2 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 91) {\r\n                s3 = peg$c112;\r\n                peg$currPos++;\r\n              } else {\r\n                s3 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n              }\r\n              if (s3 !== peg$FAILED) {\r\n                s4 = peg$parse__();\r\n                if (s4 !== peg$FAILED) {\r\n                  s5 = peg$parseVarToken();\r\n                  if (s5 !== peg$FAILED) {\r\n                    s6 = peg$parse__();\r\n                    if (s6 !== peg$FAILED) {\r\n                      s7 = peg$parseVariableDeclarationListNoIn();\r\n                      if (s7 !== peg$FAILED) {\r\n                        s8 = peg$parse__();\r\n                        if (s8 !== peg$FAILED) {\r\n                          if (input.charCodeAt(peg$currPos) === 58) {\r\n                            s9 = peg$c240;\r\n                            peg$currPos++;\r\n                          } else {\r\n                            s9 = peg$FAILED;\r\n                            if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n                          }\r\n                          if (s9 !== peg$FAILED) {\r\n                            s10 = peg$parse__();\r\n                            if (s10 !== peg$FAILED) {\r\n                              s11 = peg$currPos;\r\n                              s12 = peg$parseExpression();\r\n                              if (s12 !== peg$FAILED) {\r\n                                s13 = peg$parse__();\r\n                                if (s13 !== peg$FAILED) {\r\n                                  s12 = [s12, s13];\r\n                                  s11 = s12;\r\n                                } else {\r\n                                  peg$currPos = s11;\r\n                                  s11 = peg$FAILED;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s11;\r\n                                s11 = peg$FAILED;\r\n                              }\r\n                              if (s11 === peg$FAILED) {\r\n                                s11 = null;\r\n                              }\r\n                              if (s11 !== peg$FAILED) {\r\n                                if (input.charCodeAt(peg$currPos) === 58) {\r\n                                  s12 = peg$c240;\r\n                                  peg$currPos++;\r\n                                } else {\r\n                                  s12 = peg$FAILED;\r\n                                  if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n                                }\r\n                                if (s12 !== peg$FAILED) {\r\n                                  s13 = peg$parse__();\r\n                                  if (s13 !== peg$FAILED) {\r\n                                    s14 = peg$currPos;\r\n                                    s15 = peg$parseExpression();\r\n                                    if (s15 !== peg$FAILED) {\r\n                                      s16 = peg$parse__();\r\n                                      if (s16 !== peg$FAILED) {\r\n                                        s15 = [s15, s16];\r\n                                        s14 = s15;\r\n                                      } else {\r\n                                        peg$currPos = s14;\r\n                                        s14 = peg$FAILED;\r\n                                      }\r\n                                    } else {\r\n                                      peg$currPos = s14;\r\n                                      s14 = peg$FAILED;\r\n                                    }\r\n                                    if (s14 === peg$FAILED) {\r\n                                      s14 = null;\r\n                                    }\r\n                                    if (s14 !== peg$FAILED) {\r\n                                      if (input.charCodeAt(peg$currPos) === 93) {\r\n                                        s15 = peg$c114;\r\n                                        peg$currPos++;\r\n                                      } else {\r\n                                        s15 = peg$FAILED;\r\n                                        if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                                      }\r\n                                      if (s15 !== peg$FAILED) {\r\n                                        s16 = peg$parse__();\r\n                                        if (s16 !== peg$FAILED) {\r\n                                          s17 = peg$parseStatement();\r\n                                          if (s17 !== peg$FAILED) {\r\n                                            peg$savedPos = s0;\r\n                                            s1 = peg$c356(s7, s11, s14, s17);\r\n                                            s0 = s1;\r\n                                          } else {\r\n                                            peg$currPos = s0;\r\n                                            s0 = peg$FAILED;\r\n                                          }\r\n                                        } else {\r\n                                          peg$currPos = s0;\r\n                                          s0 = peg$FAILED;\r\n                                        }\r\n                                      } else {\r\n                                        peg$currPos = s0;\r\n                                        s0 = peg$FAILED;\r\n                                      }\r\n                                    } else {\r\n                                      peg$currPos = s0;\r\n                                      s0 = peg$FAILED;\r\n                                    }\r\n                                  } else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s0;\r\n                                  s0 = peg$FAILED;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$currPos;\r\n            s1 = peg$parseForToken();\r\n            if (s1 !== peg$FAILED) {\r\n              s2 = peg$parse__();\r\n              if (s2 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 91) {\r\n                  s3 = peg$c112;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s3 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                  s4 = peg$parse__();\r\n                  if (s4 !== peg$FAILED) {\r\n                    s5 = peg$parseLeftHandSideExpression();\r\n                    if (s5 !== peg$FAILED) {\r\n                      s6 = peg$parse__();\r\n                      if (s6 !== peg$FAILED) {\r\n                        s7 = peg$parseInToken();\r\n                        if (s7 !== peg$FAILED) {\r\n                          s8 = peg$parse__();\r\n                          if (s8 !== peg$FAILED) {\r\n                            s9 = peg$parseExpression();\r\n                            if (s9 !== peg$FAILED) {\r\n                              s10 = peg$parse__();\r\n                              if (s10 !== peg$FAILED) {\r\n                                if (input.charCodeAt(peg$currPos) === 93) {\r\n                                  s11 = peg$c114;\r\n                                  peg$currPos++;\r\n                                } else {\r\n                                  s11 = peg$FAILED;\r\n                                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                                }\r\n                                if (s11 !== peg$FAILED) {\r\n                                  s12 = peg$parse__();\r\n                                  if (s12 !== peg$FAILED) {\r\n                                    s13 = peg$parseStatement();\r\n                                    if (s13 !== peg$FAILED) {\r\n                                      peg$savedPos = s0;\r\n                                      s1 = peg$c357(s5, s9, s13);\r\n                                      s0 = s1;\r\n                                    } else {\r\n                                      peg$currPos = s0;\r\n                                      s0 = peg$FAILED;\r\n                                    }\r\n                                  } else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s0;\r\n                                  s0 = peg$FAILED;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$currPos;\r\n              s1 = peg$parseForToken();\r\n              if (s1 !== peg$FAILED) {\r\n                s2 = peg$parse__();\r\n                if (s2 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 91) {\r\n                    s3 = peg$c112;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s3 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n                  }\r\n                  if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parse__();\r\n                    if (s4 !== peg$FAILED) {\r\n                      s5 = peg$parseVarToken();\r\n                      if (s5 !== peg$FAILED) {\r\n                        s6 = peg$parse__();\r\n                        if (s6 !== peg$FAILED) {\r\n                          s7 = peg$parseVariableDeclarationListNoIn();\r\n                          if (s7 !== peg$FAILED) {\r\n                            s8 = peg$parse__();\r\n                            if (s8 !== peg$FAILED) {\r\n                              s9 = peg$parseInToken();\r\n                              if (s9 !== peg$FAILED) {\r\n                                s10 = peg$parse__();\r\n                                if (s10 !== peg$FAILED) {\r\n                                  s11 = peg$parseExpression();\r\n                                  if (s11 !== peg$FAILED) {\r\n                                    s12 = peg$parse__();\r\n                                    if (s12 !== peg$FAILED) {\r\n                                      if (input.charCodeAt(peg$currPos) === 93) {\r\n                                        s13 = peg$c114;\r\n                                        peg$currPos++;\r\n                                      } else {\r\n                                        s13 = peg$FAILED;\r\n                                        if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                                      }\r\n                                      if (s13 !== peg$FAILED) {\r\n                                        s14 = peg$parse__();\r\n                                        if (s14 !== peg$FAILED) {\r\n                                          s15 = peg$parseStatement();\r\n                                          if (s15 !== peg$FAILED) {\r\n                                            peg$savedPos = s0;\r\n                                            s1 = peg$c358(s7, s11, s15);\r\n                                            s0 = s1;\r\n                                          } else {\r\n                                            peg$currPos = s0;\r\n                                            s0 = peg$FAILED;\r\n                                          }\r\n                                        } else {\r\n                                          peg$currPos = s0;\r\n                                          s0 = peg$FAILED;\r\n                                        }\r\n                                      } else {\r\n                                        peg$currPos = s0;\r\n                                        s0 = peg$FAILED;\r\n                                      }\r\n                                    } else {\r\n                                      peg$currPos = s0;\r\n                                      s0 = peg$FAILED;\r\n                                    }\r\n                                  } else {\r\n                                    peg$currPos = s0;\r\n                                    s0 = peg$FAILED;\r\n                                  }\r\n                                } else {\r\n                                  peg$currPos = s0;\r\n                                  s0 = peg$FAILED;\r\n                                }\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseContinueStatement() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseContinueToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseEOS();\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c359();\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseContinueToken();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse_();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseIdentifier();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseEOS();\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c360(s3);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseBreakStatement() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseBreakToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseEOS();\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c361();\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseBreakToken();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse_();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseIdentifier();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseEOS();\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c362(s3);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseReturnStatement() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseReturnToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseEOS();\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c363();\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseReturnToken();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse_();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseExpression();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseEOS();\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c364(s3);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseWithStatement() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseWithToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 40) {\r\n          s3 = peg$c221;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseExpression();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 41) {\r\n                  s7 = peg$c223;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parseStatement();\r\n                    if (s9 !== peg$FAILED) {\r\n                      peg$savedPos = s0;\r\n                      s1 = peg$c365(s5, s9);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSwitchStatement() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseSwitchToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 40) {\r\n          s3 = peg$c221;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseExpression();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 41) {\r\n                  s7 = peg$c223;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parseCaseBlock();\r\n                    if (s9 !== peg$FAILED) {\r\n                      peg$savedPos = s0;\r\n                      s1 = peg$c366(s5, s9);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseCaseBlock() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 123) {\r\n      s1 = peg$c235;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        s4 = peg$parseCaseClauses();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parse__();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = null;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 125) {\r\n            s4 = peg$c218;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c219); }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c367(s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 123) {\r\n        s1 = peg$c235;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c236); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          s4 = peg$parseCaseClauses();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parse__();\r\n            if (s5 !== peg$FAILED) {\r\n              s4 = [s4, s5];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 === peg$FAILED) {\r\n            s3 = null;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseDefaultClause();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parse__();\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$currPos;\r\n                s7 = peg$parseCaseClauses();\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s7 = [s7, s8];\r\n                    s6 = s7;\r\n                  } else {\r\n                    peg$currPos = s6;\r\n                    s6 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s6;\r\n                  s6 = peg$FAILED;\r\n                }\r\n                if (s6 === peg$FAILED) {\r\n                  s6 = null;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 125) {\r\n                    s7 = peg$c218;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s7 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c219); }\r\n                  }\r\n                  if (s7 !== peg$FAILED) {\r\n                    peg$savedPos = s0;\r\n                    s1 = peg$c368(s3, s4, s6);\r\n                    s0 = s1;\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseCaseClauses() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseCaseClause();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseCaseClause();\r\n        if (s5 !== peg$FAILED) {\r\n          s4 = [s4, s5];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseCaseClause();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c346(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseCaseClause() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseCaseToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parseExpression();\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 58) {\r\n              s5 = peg$c240;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$currPos;\r\n              s7 = peg$parse__();\r\n              if (s7 !== peg$FAILED) {\r\n                s8 = peg$parseStatementList();\r\n                if (s8 !== peg$FAILED) {\r\n                  s7 = [s7, s8];\r\n                  s6 = s7;\r\n                } else {\r\n                  peg$currPos = s6;\r\n                  s6 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s6;\r\n                s6 = peg$FAILED;\r\n              }\r\n              if (s6 === peg$FAILED) {\r\n                s6 = null;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c369(s3, s6);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDefaultClause() {\r\n    var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseDefaultToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 58) {\r\n          s3 = peg$c240;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$currPos;\r\n          s5 = peg$parse__();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parseStatementList();\r\n            if (s6 !== peg$FAILED) {\r\n              s5 = [s5, s6];\r\n              s4 = s5;\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$FAILED;\r\n          }\r\n          if (s4 === peg$FAILED) {\r\n            s4 = null;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c370(s4);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseLabelledStatement() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseIdentifier();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 58) {\r\n          s3 = peg$c240;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c241); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseStatement();\r\n            if (s5 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c371(s1, s5);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseThrowStatement() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseThrowToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse_();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parseExpression();\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parseEOS();\r\n          if (s4 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c372(s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseTryStatement() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseTryToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parseBlock();\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseCatch();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$parseFinally();\r\n                if (s7 !== peg$FAILED) {\r\n                  peg$savedPos = s0;\r\n                  s1 = peg$c373(s3, s5, s7);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseTryToken();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parse__();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseBlock();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parse__();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parseCatch();\r\n              if (s5 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c374(s3, s5);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$currPos;\r\n        s1 = peg$parseTryToken();\r\n        if (s1 !== peg$FAILED) {\r\n          s2 = peg$parse__();\r\n          if (s2 !== peg$FAILED) {\r\n            s3 = peg$parseBlock();\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$parse__();\r\n              if (s4 !== peg$FAILED) {\r\n                s5 = peg$parseFinally();\r\n                if (s5 !== peg$FAILED) {\r\n                  peg$savedPos = s0;\r\n                  s1 = peg$c375(s3, s5);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseCatch() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseCatchToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 40) {\r\n          s3 = peg$c221;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parseIdentifier();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 41) {\r\n                  s7 = peg$c223;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parseBlock();\r\n                    if (s9 !== peg$FAILED) {\r\n                      peg$savedPos = s0;\r\n                      s1 = peg$c376(s5, s9);\r\n                      s0 = s1;\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFinally() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseFinallyToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parseBlock();\r\n        if (s3 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c377(s3);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseDebuggerStatement() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseDebuggerToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parseEOS();\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c378();\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFunctionDeclaration() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseFunctionToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$parseIdentifier();\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parse__();\r\n          if (s4 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 91) {\r\n              s5 = peg$c112;\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parse__();\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$currPos;\r\n                s8 = peg$parseFormalParameterList();\r\n                if (s8 !== peg$FAILED) {\r\n                  s9 = peg$parse__();\r\n                  if (s9 !== peg$FAILED) {\r\n                    s8 = [s8, s9];\r\n                    s7 = s8;\r\n                  } else {\r\n                    peg$currPos = s7;\r\n                    s7 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s7;\r\n                  s7 = peg$FAILED;\r\n                }\r\n                if (s7 === peg$FAILED) {\r\n                  s7 = null;\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 93) {\r\n                    s8 = peg$c114;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s8 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                  }\r\n                  if (s8 !== peg$FAILED) {\r\n                    s9 = peg$parse__();\r\n                    if (s9 !== peg$FAILED) {\r\n                      if (input.charCodeAt(peg$currPos) === 40) {\r\n                        s10 = peg$c221;\r\n                        peg$currPos++;\r\n                      } else {\r\n                        s10 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n                      }\r\n                      if (s10 !== peg$FAILED) {\r\n                        s11 = peg$parse__();\r\n                        if (s11 !== peg$FAILED) {\r\n                          s12 = peg$parseFunctionBody();\r\n                          if (s12 !== peg$FAILED) {\r\n                            s13 = peg$parse__();\r\n                            if (s13 !== peg$FAILED) {\r\n                              if (input.charCodeAt(peg$currPos) === 41) {\r\n                                s14 = peg$c223;\r\n                                peg$currPos++;\r\n                              } else {\r\n                                s14 = peg$FAILED;\r\n                                if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n                              }\r\n                              if (s14 !== peg$FAILED) {\r\n                                peg$savedPos = s0;\r\n                                s1 = peg$c379(s3, s7, s12);\r\n                                s0 = s1;\r\n                              } else {\r\n                                peg$currPos = s0;\r\n                                s0 = peg$FAILED;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFunctionExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseFunctionToken();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse__();\r\n      if (s2 !== peg$FAILED) {\r\n        s3 = peg$currPos;\r\n        s4 = peg$parseIdentifier();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parse__();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = null;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 91) {\r\n            s4 = peg$c112;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parse__();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$currPos;\r\n              s7 = peg$parseFormalParameterList();\r\n              if (s7 !== peg$FAILED) {\r\n                s8 = peg$parse__();\r\n                if (s8 !== peg$FAILED) {\r\n                  s7 = [s7, s8];\r\n                  s6 = s7;\r\n                } else {\r\n                  peg$currPos = s6;\r\n                  s6 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s6;\r\n                s6 = peg$FAILED;\r\n              }\r\n              if (s6 === peg$FAILED) {\r\n                s6 = null;\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 93) {\r\n                  s7 = peg$c114;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parse__();\r\n                  if (s8 !== peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 40) {\r\n                      s9 = peg$c221;\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s9 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c222); }\r\n                    }\r\n                    if (s9 !== peg$FAILED) {\r\n                      s10 = peg$parse__();\r\n                      if (s10 !== peg$FAILED) {\r\n                        s11 = peg$parseFunctionBody();\r\n                        if (s11 !== peg$FAILED) {\r\n                          s12 = peg$parse__();\r\n                          if (s12 !== peg$FAILED) {\r\n                            if (input.charCodeAt(peg$currPos) === 41) {\r\n                              s13 = peg$c223;\r\n                              peg$currPos++;\r\n                            } else {\r\n                              s13 = peg$FAILED;\r\n                              if (peg$silentFails === 0) { peg$fail(peg$c224); }\r\n                            }\r\n                            if (s13 !== peg$FAILED) {\r\n                              peg$savedPos = s0;\r\n                              s1 = peg$c380(s3, s6, s11);\r\n                              s0 = s1;\r\n                            } else {\r\n                              peg$currPos = s0;\r\n                              s0 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s0;\r\n                            s0 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s0;\r\n                          s0 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s0;\r\n                        s0 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s0;\r\n                      s0 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFormalParameterList() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseIdentifier();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 44) {\r\n          s5 = peg$c228;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse__();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parseIdentifier();\r\n            if (s7 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6, s7];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s5 = peg$c228;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c229); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parse__();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parseIdentifier();\r\n              if (s7 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6, s7];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c239(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFunctionBody() {\r\n    var s0, s1;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseSourceElements();\r\n    if (s1 === peg$FAILED) {\r\n      s1 = null;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      peg$savedPos = s0;\r\n      s1 = peg$c381(s1);\r\n    }\r\n    s0 = s1;\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseProgram() {\r\n    var s0, s1;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseSourceElements();\r\n    if (s1 === peg$FAILED) {\r\n      s1 = null;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      peg$savedPos = s0;\r\n      s1 = peg$c382(s1);\r\n    }\r\n    s0 = s1;\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSourceElements() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseSourceElement();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse__();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parseSourceElement();\r\n        if (s5 !== peg$FAILED) {\r\n          s4 = [s4, s5];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse__();\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parseSourceElement();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c383(s1, s2);\r\n        s0 = s1;\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseSourceElement() {\r\n    var s0;\r\n\r\n    s0 = peg$parseStatement();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseFunctionDeclaration();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n\r\n    var TYPES_TO_PROPERTY_NAMES = {\r\n      CallExpression:   \"callee\",\r\n      MemberExpression: \"object\",\r\n    };\r\n\r\n    function filledArray(count, value) {\r\n      return Array.apply(null, new Array(count))\r\n        .map(function() { return value; });\r\n    }\r\n\r\n    function extractOptional(optional, index) {\r\n      return optional ? optional[index] : null;\r\n    }\r\n\r\n    function extractList(list, index) {\r\n      return list.map(function(element) { return element[index]; });\r\n    }\r\n\r\n    function buildList(head, tail, index) {\r\n      return [head].concat(extractList(tail, index));\r\n    }\r\n\r\n    function buildBinaryExpression(head, tail) {\r\n      return tail.reduce(function(result, element) {\r\n        return {\r\n          type: \"BinaryExpression\",\r\n          operator: element[1],\r\n          left: result,\r\n          right: element[3]\r\n        };\r\n      }, head);\r\n    }\r\n\r\n    function buildLogicalExpression(head, tail) {\r\n      return tail.reduce(function(result, element) {\r\n        return {\r\n          type: \"LogicalExpression\",\r\n          operator: element[1],\r\n          left: result,\r\n          right: element[3]\r\n        };\r\n      }, head);\r\n    }\r\n\r\n    function optionalList(value) {\r\n      return value !== null ? value : [];\r\n    }\r\n\r\n\r\n  peg$result = peg$startRuleFunction();\r\n\r\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\r\n    return peg$result;\r\n  } else {\r\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\r\n      peg$fail(peg$endExpectation());\r\n    }\r\n\r\n    throw peg$buildStructuredError(\r\n      peg$maxFailExpected,\r\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\r\n      peg$maxFailPos < input.length\r\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\r\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  SyntaxError: peg$SyntaxError,\r\n  parse:       peg$parse\r\n};\r\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":32,"column":15,"nodeType":"64","endLine":32,"endColumn":16},{"ruleId":"62","severity":1,"message":"65","line":37,"column":7,"nodeType":"66","endLine":37,"endColumn":9,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":7,"column":1,"nodeType":"70","messageId":"71","endLine":7,"endColumn":14,"fix":"72"},{"ruleId":"73","severity":1,"message":"74","line":73,"column":16,"nodeType":"75","messageId":"76","endLine":73,"endColumn":30},{"ruleId":"73","severity":1,"message":"77","line":74,"column":16,"nodeType":"75","messageId":"76","endLine":74,"endColumn":39},{"ruleId":"73","severity":1,"message":"74","line":87,"column":16,"nodeType":"75","messageId":"76","endLine":87,"endColumn":30},{"ruleId":"73","severity":1,"message":"77","line":88,"column":16,"nodeType":"75","messageId":"76","endLine":88,"endColumn":39},{"ruleId":"78","severity":1,"message":"79","line":218,"column":21,"nodeType":"75","messageId":"80","endLine":218,"endColumn":22,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":277,"column":24,"nodeType":"75","messageId":"80","endLine":277,"endColumn":25,"suggestions":"83"},{"ruleId":"78","severity":1,"message":"82","line":279,"column":23,"nodeType":"75","messageId":"80","endLine":279,"endColumn":24,"suggestions":"84"},{"ruleId":"78","severity":1,"message":"79","line":557,"column":21,"nodeType":"75","messageId":"80","endLine":557,"endColumn":22,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":875,"column":12,"nodeType":"64","messageId":"88","endLine":875,"endColumn":20},{"ruleId":"86","severity":1,"message":"89","line":879,"column":12,"nodeType":"64","messageId":"88","endLine":879,"endColumn":20},{"ruleId":"86","severity":1,"message":"90","line":1094,"column":7,"nodeType":"64","messageId":"88","endLine":1094,"endColumn":9},{"ruleId":"86","severity":1,"message":"90","line":1164,"column":7,"nodeType":"64","messageId":"88","endLine":1164,"endColumn":9},{"ruleId":"86","severity":1,"message":"90","line":1181,"column":7,"nodeType":"64","messageId":"88","endLine":1181,"endColumn":9},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"react-hooks/exhaustive-deps","Assignments to the 'aux' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Identifier","React Hook useEffect has a missing dependency: 'aux.doc'. Either include it or remove the dependency array.","ArrayExpression",["93"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"94","text":"95"},"no-control-regex","Unexpected control character(s) in regular expression: \\x00, \\x0f.","Literal","unexpected","Unexpected control character(s) in regular expression: \\x10, \\x1f.","no-useless-escape","Unnecessary escape character: \\-.","unnecessaryEscape",["96","97"],"Unnecessary escape character: \\/.",["98","99"],["100","101"],["102","103"],"no-unused-vars","'location' is defined but never used.","unusedVar","'expected' is defined but never used.","'s1' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},[69,82],"",{"messageId":"106","fix":"107","desc":"108"},{"messageId":"109","fix":"110","desc":"111"},{"messageId":"106","fix":"112","desc":"108"},{"messageId":"109","fix":"113","desc":"111"},{"messageId":"106","fix":"114","desc":"108"},{"messageId":"109","fix":"115","desc":"111"},{"messageId":"106","fix":"116","desc":"108"},{"messageId":"109","fix":"117","desc":"111"},"Update the dependencies array to be: [aux.doc]",{"range":"118","text":"119"},"removeEscape",{"range":"120","text":"95"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"121","text":"122"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"123","text":"95"},{"range":"124","text":"122"},{"range":"125","text":"95"},{"range":"126","text":"122"},{"range":"127","text":"95"},{"range":"128","text":"122"},[1262,1264],"[aux.doc]",[7062,7063],[7062,7062],"\\",[9334,9335],[9334,9334],[9441,9442],[9441,9441],[63212,63213],[63212,63212]]